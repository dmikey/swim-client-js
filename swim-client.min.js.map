{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","node_modules/swim-proto-js/config.json","node_modules/swim-proto-js/swim-proto.js","swim-client.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","swim","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","version","decode","record","recon","tag","EventMessage","CommandMessage","LinkRequest","LinkedResponse","SyncRequest","SyncedResponse","UnlinkRequest","UnlinkedResponse","AuthRequest","AuthedResponse","DeauthRequest","DeauthedResponse","encode","envelope","parse","string","stringify","Envelope","RequestEnvelope","ResponseEnvelope","MessageEnvelope","node","lane","body","prio","config","Object","defineProperty","prototype","value","create","constructor","withAddress","undefined","headers","concat","@event","tail","head","header","@command","push","@link","@linked","@sync","@synced","@unlink","@unlinked","@auth","@authed","@deauth","@deauthed","Client","options","enumerable","configurable","writable","Scope","channel","registerDelegate","HostScope","hostUri","NodeScope","nodeUri","LaneScope","laneUri","Channel","client","credentials","UriCache","WebSocketChannel","HttpSocketChannel","LineIterator","index","more","StringIterator","DownlinkBuilder","scope","Downlink","delegate","LinkedDownlink","SyncedDownlink","ListDownlink","MapDownlink","primaryKey","primaryKeyOption","sortBy","sortByOption","baseUri","size","uri","Array","proto","WebSocket","w3cwebsocket","info","onConnect","onDisconnect","onError","onAuthorize","onDeauthorize","name","args","extractHostUri","resolveNodeUri","getOrCreateChannel","channels","noWebSocket","test","authorize","downlink","link","callChannelWithLinkArgs","arguments","sync","syncList","syncMap","command","host","close","scheme","authority","resolve","get","isConnected","isAuthorized","session","registerDownlink","unregisterDownlink","__proto__","onChannelClose","downlinks","splice","unregisterDelegate","protocols","maxReconnectTimeout","idleTimeout","sendBufferSize","unresolvedUri","uriCache","unresolve","resolvedUri","equal","request","open","message","delegates","clearIdle","nodeDownlinks","laneDownlinks","onChannelConnect","keys","watchIdle","onUnlinkRequest","onEnvelope","isEventMessage","onEventMessage","isCommandMessage","onCommandMessage","isLinkRequest","onLinkRequest","isLinkedResponse","onLinkedResponse","isSyncRequest","onSyncRequest","isSyncedResponse","onSyncedResponse","isUnlinkRequest","isUnlinkedResponse","onUnlinkedResponse","isAuthRequest","onAuthRequest","isAuthedResponse","onAuthedResponse","isDeauthRequest","onDeauthRequest","isDeauthedResponse","onDeauthedResponse","resolvedMessage","response","resolvedResponse","onChannelAuthorize","onChannelDeauthorize","onChannelDisconnect","slice","onChannelError","reconnect","reconnectTimer","reconnectTimeout","Math","min","jitter","random","setTimeout","bind","clearReconnect","clearTimeout","idleTimer","sendBuffer","checkIdle","socket","readyState","OPEN","onopen","onWebSocketOpen","onmessage","onWebSocketMessage","onerror","onWebSocketError","onclose","onWebSocketClose","text","send","shift","data","sendDelay","throttleSend","sendTimer","clearSend","XMLHttpRequest","onreadystatechange","onHttpSocketChange","onloadstart","onHttpSocketOpen","onprogress","onHttpSocketData","onload","onHttpSocketError","onloadend","onHttpSocketClose","setRequestHeader","abort","channelId","parser","BlockParser","offset","getResponseHeader","input","responseText","isInputEmpty","isInputDone","isCont","next","isEmpty","isDone","feed","step","state","isError","keepAlive","onEvent","callback","proxy","onCommand","onLink","onLinked","onSync","onSynced","onUnlink","onUnlinked","onClose","key","configure","normalize","set","remoteUpdate","remoteInsert","from","to","remoteMove","remoteRemove","remoteClear","remoteAppend","fromIndex","toIndex","@update","pop","@remove","unshift","@insert","move","removed","@move","start","deleteCount","clear","@clear","forEach","thisArg","remoteSet","remoteDelete","table","$key","sort","has","oldValue","delete","values","split","x","y","compare","hashBucket","abs","hash","cacheEntry","resolveCache","unresolved","resolved","base","unresolveCache","rotl","distance","mix","mash","charAt"],"mappings":"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","file":"swim-client.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.4.7\"}\n","module.exports={\"version\":\"0.4.2\"}","'use strict';\n\nvar config = require('./config.json');\nvar recon = global.recon || require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n    case '@auth': return AuthRequest.decode(record);\n    case '@authed': return AuthedResponse.decode(record);\n    case '@deauth': return DeauthRequest.decode(record);\n    case '@deauthed': return DeauthedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nfunction AuthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nAuthRequest.prototype = Object.create(RequestEnvelope.prototype);\nAuthRequest.prototype.constructor = AuthRequest;\nObject.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});\nAuthRequest.prototype.encode = function () {\n  return recon.concat({'@auth': null}, this.body);\n};\nAuthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthRequest(body);\n};\n\n\nfunction AuthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nAuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nAuthedResponse.prototype.constructor = AuthedResponse;\nObject.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});\nAuthedResponse.prototype.encode = function () {\n  return recon.concat({'@authed': null}, this.body);\n};\nAuthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthedResponse(body);\n};\n\n\nfunction DeauthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nDeauthRequest.prototype = Object.create(RequestEnvelope.prototype);\nDeauthRequest.prototype.constructor = DeauthRequest;\nObject.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});\nDeauthRequest.prototype.encode = function () {\n  return recon.concat({'@deauth': null}, this.body);\n};\nDeauthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthRequest(body);\n};\n\n\nfunction DeauthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nDeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nDeauthedResponse.prototype.constructor = DeauthedResponse;\nObject.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});\nDeauthedResponse.prototype.encode = function () {\n  return recon.concat({'@deauthed': null}, this.body);\n};\nDeauthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthedResponse(body);\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.AuthRequest = AuthRequest;\nexports.AuthedResponse = AuthedResponse;\nexports.DeauthRequest = DeauthRequest;\nexports.DeauthedResponse = DeauthedResponse;\nexports.config = config;\n","'use strict';\n\nvar config = require('./config.json');\nvar recon = global.recon || require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n}\nObject.defineProperty(Client.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    if (this.options.noWebSocket || /^http/.test(hostUri)) {\n      channel = new HttpSocketChannel(this, hostUri, this.options);\n    } else {\n      channel = new WebSocketChannel(this, hostUri, this.options);\n    }\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.authorize = function (hostUri, credentials) {\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.authorize(credentials);\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope(channel) {\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n  channel.registerDelegate(this);\n}\nObject.defineProperty(Scope.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  this.channel.unregisterDelegate(this);\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.close();\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.authorize = function (credentials) {\n  this.channel.authorize(credentials);\n};\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(client, hostUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'client', {value: client, configurable: true});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});\n  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});\n  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'delegates', {value: [], configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.authorize = function (credentials) {\n  if (recon.equal(credentials, this.credentials)) return;\n  this.credentials = credentials;\n  if (this.isConnected) {\n    var request = new proto.AuthRequest(credentials);\n    this.push(request);\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDelegate = function (delegate) {\n  this.delegates.push(delegate);\n};\nChannel.prototype.unregisterDelegate = function (delegate) {\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    if (this.delegates[i] === delegate) {\n      this.delegates.splice(i, 1);\n    }\n  }\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.isConnected) {\n    downlink.onChannelConnect({hostUri: this.hostUri});\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.isConnected) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  } else if (envelope.isAuthRequest) {\n    this.onAuthRequest(envelope);\n  } else if (envelope.isAuthedResponse) {\n    this.onAuthedResponse(envelope);\n  } else if (envelope.isDeauthRequest) {\n    this.onDeauthRequest(envelope);\n  } else if (envelope.isDeauthedResponse) {\n    this.onDeauthedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onAuthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onAuthedResponse = function (response) {\n  this.isAuthorized = true;\n  this.session = response.body;\n  var info = {hostUri: this.hostUri, session: this.session};\n  this.client.onChannelAuthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelAuthorize(info);\n  }\n};\nChannel.prototype.onDeauthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onDeauthedResponse = function (response) {\n  this.isAuthorized = false;\n  this.session = null;\n  var info = {hostUri: this.hostUri, session: response.body};\n  this.client.onChannelDeauthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDeauthorize(info);\n  }\n};\nChannel.prototype.onConnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelConnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelConnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelDisconnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDisconnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelError(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelError(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError(info);\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearReconnect = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.isConnected && this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\n\n\nfunction WebSocketChannel(client, hostUri, options) {\n  Channel.call(this, client, hostUri, options);\n}\nWebSocketChannel.prototype = Object.create(Channel.prototype);\nWebSocketChannel.prototype.constructor = WebSocketChannel;\nObject.defineProperty(WebSocketChannel.prototype, 'isConnected', {\n  get: function () {\n    return this.socket && this.socket.readyState === this.socket.OPEN;\n  },\n  enumerable: true\n});\nWebSocketChannel.prototype.open = function () {\n  this.clearReconnect();\n  if (!this.socket) {\n    this.socket = this.protocols ?\n      new WebSocket(this.hostUri, this.protocols) :\n      new WebSocket(this.hostUri);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nWebSocketChannel.prototype.close = function () {\n  this.clearReconnect();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  Channel.prototype.close.call(this);\n};\nWebSocketChannel.prototype.push = function (envelope) {\n  if (this.isConnected) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nWebSocketChannel.prototype.onWebSocketOpen = function () {\n  if (this.credentials) {\n    var request = new proto.AuthRequest(this.credentials);\n    this.push(request);\n  }\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nWebSocketChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nWebSocketChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nWebSocketChannel.prototype.onWebSocketClose = function () {\n  this.isAuthorized = false;\n  this.session = null;\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction HttpSocketChannel(client, hostUri, options) {\n  Channel.call(this, client, hostUri, options);\n  Object.defineProperty(this, 'channelId', {value: null, writable: true});\n  Object.defineProperty(this, 'parser', {value: null, writable: true});\n  Object.defineProperty(this, 'offset', {value: 0, writable: true});\n  Object.defineProperty(this, 'sendTimer', {value: null, writable: true});\n}\nHttpSocketChannel.prototype = Object.create(Channel.prototype);\nHttpSocketChannel.prototype.constructor = HttpSocketChannel;\nObject.defineProperty(HttpSocketChannel.prototype, 'sendDelay', {\n  get: function () {\n    return this.options.sendDelay || 100;\n  }\n});\nObject.defineProperty(HttpSocketChannel.prototype, 'isConnected', {\n  get: function () {\n    return this.socket && this.socket.readyState >= 1;\n  },\n  enumerable: true\n});\nHttpSocketChannel.prototype.throttleSend = function () {\n  if (!this.sendTimer) {\n    this.sendTimer = setTimeout(this.send.bind(this), this.sendDelay);\n  }\n};\nHttpSocketChannel.prototype.clearSend = function () {\n  if (this.sendTimer) {\n    clearTimeout(this.sendTimer);\n    this.sendTimer = null;\n  }\n};\nHttpSocketChannel.prototype.open = function () {\n  this.clearReconnect();\n  if (!this.socket) {\n    this.socket = new XMLHttpRequest();\n    this.socket.open('POST', this.hostUri);\n    this.socket.onreadystatechange = this.onHttpSocketChange.bind(this);\n    this.socket.onloadstart = this.onHttpSocketOpen.bind(this);\n    this.socket.onprogress = this.onHttpSocketData.bind(this);\n    this.socket.onload = this.onHttpSocketData.bind(this);\n    this.socket.onerror = this.onHttpSocketError.bind(this);\n    this.socket.onloadend = this.onHttpSocketClose.bind(this);\n    this.socket.setRequestHeader('X-Swim-Connection', 'Upgrade');\n    this.socket.send();\n  }\n};\nHttpSocketChannel.prototype.close = function () {\n  this.clearReconnect();\n  this.clearIdle();\n  this.clearSend();\n  if (this.socket) {\n    this.socket.abort();\n    this.socket = null;\n  }\n  Channel.prototype.close.call(this);\n};\nHttpSocketChannel.prototype.send = function () {\n  this.clearSend();\n  if (!this.channelId) {\n    this.throttleSend();\n    return;\n  }\n  var request = new XMLHttpRequest();\n  request.open('POST', this.hostUri);\n  request.setRequestHeader('X-Swim-Channel', this.channelId);\n  this.watchIdle();\n  var body = '';\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    body = body + proto.stringify(envelope) + '\\n';\n  }\n  request.send(body);\n};\nHttpSocketChannel.prototype.push = function (envelope) {\n  if (this.isConnected) {\n    this.clearIdle();\n    this.sendBuffer.push(envelope);\n    this.throttleSend();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nHttpSocketChannel.prototype.onHttpSocketOpen = function () {\n  this.parser = new recon.BlockParser();\n  this.offset = 0;\n  this.onConnect();\n  this.watchIdle();\n};\nHttpSocketChannel.prototype.onHttpSocketChange = function () {\n  if (this.socket.readyState === 2) {\n    this.channelId = this.socket.getResponseHeader('X-Swim-Channel');\n    if (!this.channelId) {\n      this.socket.abort();\n    }\n  }\n}\nHttpSocketChannel.prototype.onHttpSocketData = function () {\n  var input = new LineIterator(this.socket.responseText, this.offset, true);\n  while ((!input.isInputEmpty() || input.isInputDone()) && this.parser.isCont()) {\n    var next = this.parser;\n    while ((!input.isEmpty() || input.isDone()) && next.isCont()) {\n      next = next.feed(input);\n    }\n    if (!input.isInputEmpty() && input.head() === 10/*'\\n'*/) {\n      input.step();\n    }\n    this.offset = input.index;\n    if (next.isDone()) {\n      var envelope = proto.decode(next.state());\n      if (envelope) {\n        this.onEnvelope(envelope);\n      }\n      this.parser = new recon.BlockParser();\n    } else if (next.isError()) {\n      // TODO\n      this.parser = new recon.BlockParser();\n      break;\n    } else {\n      this.parser = next;\n    }\n  }\n};\nHttpSocketChannel.prototype.onHttpSocketError = function () {\n  this.onError();\n  this.clearIdle();\n};\nHttpSocketChannel.prototype.onHttpSocketClose = function () {\n  this.isAuthorized = false;\n  this.session = null;\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction LineIterator(string, index, more) {\n  recon.StringIterator.call(this, string, index, more);\n}\nLineIterator.prototype = Object.create(recon.StringIterator.prototype);\nLineIterator.prototype.constructor = LineIterator;\nLineIterator.prototype.isDone = function () {\n  return this.index >= this.string.length && !this.more ||\n    this.index < this.string.length && this.head() === 10 /*'\\n'*/;\n};\nLineIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length || this.head() === 10 /*'\\n'*/;\n};\nLineIterator.prototype.isInputDone = function () {\n  return recon.StringIterator.prototype.isDone.call(this);\n};\nLineIterator.prototype.isInputEmpty = function () {\n  return recon.StringIterator.prototype.isEmpty.call(this);\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  if (!arguments.length) return this.hostUri;\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  if (!arguments.length) return this.nodeUri;\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  if (!arguments.length) return this.laneUri;\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  if (!arguments.length) return this.options.prio;\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function (keepAlive) {\n  if (!arguments.length) return this.options.keepAlive;\n  this.options.keepAlive = keepAlive;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  if (!arguments.length) return this.options.delegate;\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  if (!arguments.length) return this.proxy.onEvent;\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  if (!arguments.length) return this.proxy.onCommand;\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  if (!arguments.length) return this.proxy.onLink;\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  if (!arguments.length) return this.proxy.onLinked;\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  if (!arguments.length) return this.proxy.onSync;\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  if (!arguments.length) return this.proxy.onSynced;\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  if (!arguments.length) return this.proxy.onUnlink;\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  if (!arguments.length) return this.proxy.onUnlinked;\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  if (!arguments.length) return this.proxy.onConnect;\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  if (!arguments.length) return this.proxy.onDisconnect;\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  if (!arguments.length) return this.proxy.onError;\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  if (!arguments.length) return this.proxy.onClose;\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  if (!arguments.length) return this.options.primaryKey;\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  if (!arguments.length) return this.options.sortBy;\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect(info);\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  value = recon(value !== undefined ? value : this.get(index));\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = recon(arguments[i]);\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = recon(arguments[i]);\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = recon(arguments[i]);\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, key, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      key = recon.get(head, 'key');\n      value = recon.tail(message.body);\n      this.remoteSet(key, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      key = recon.get(head, 'key');\n      if (key === undefined && this.primaryKey) {\n        key = this.primaryKey(message.body);\n      }\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else if (this.primaryKey) {\n      value = message.body;\n      key = this.primaryKey(value);\n      if (key !== undefined) {\n        this.remoteSet(key, value);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    Object.defineProperty(value, '$key', {value: key, configurable: true});\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      if (recon.equal(key, this.state[i].$key)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      if (recon.equal(key, this.state[i].$key)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      if (recon.equal(key, this.state[i].$key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      if (recon.equal(key, value.$key)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  value = recon(value !== undefined ? value : this.get(key));\n  Object.defineProperty(value, '$key', {value: key, configurable: true});\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  var oldValue;\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    if (recon.equal(key, this.state[i].$key)) {\n      oldValue = this.state[i];\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  if (!recon.equal(value, oldValue)) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body;\n    if (this.primaryKey) {\n      body = recon(value);\n    } else {\n      body = recon.concat(recon({'@update': {key: key}}), recon(value));\n    }\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    if (recon.equal(key, value.$key)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body;\n      if (this.primaryKey) {\n        body = recon.concat(recon({'@remove': null}), value);\n      } else {\n        body = recon({'@remove': {key: key}});\n      }\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var key = this.state[i].$key;\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = value.$key;\n    callback.call(thisArg, value, key, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return undefined;\n  }\n};\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\nswim.Client = Client;\nswim.Scope = Scope;\nswim.HostScope = HostScope;\nswim.NodeScope = NodeScope;\nswim.LaneScope = LaneScope;\nswim.Channel = Channel;\nswim.DownlinkBuilder = DownlinkBuilder;\nswim.Downlink = Downlink;\nswim.LinkedDownlink = LinkedDownlink;\nswim.SyncedDownlink = SyncedDownlink;\nswim.ListDownlink = ListDownlink;\nswim.MapDownlink = MapDownlink;\n\nmodule.exports = swim;\n"],"sourceRoot":"/source/"}