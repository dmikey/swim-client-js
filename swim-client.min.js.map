{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","swim-client.min.js","node_modules/swim-proto-js/config.json","node_modules/swim-proto-js/swim-proto.js","swim-client.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","swim","client","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version",2,3,4,"decode","record","recon","tag","EventMessage","CommandMessage","LinkRequest","LinkedResponse","SyncRequest","SyncedResponse","UnlinkRequest","UnlinkedResponse","AuthRequest","AuthedResponse","DeauthRequest","DeauthedResponse","encode","envelope","parse","string","stringify","Envelope","RequestEnvelope","ResponseEnvelope","MessageEnvelope","node","lane","body","prio","config","Object","defineProperty","prototype","value","create","constructor","withAddress","undefined","headers","concat","@event","tail","head","header","@command","push","@link","@linked","@sync","@synced","@unlink","@unlinked","@auth","@authed","@deauth","@deauthed","./config.json","recon-js","swim-client-js","Client","options","enumerable","configurable","writable","Scope","channel","registerDelegate","HostScope","hostUri","NodeScope","nodeUri","LaneScope","laneUri","Channel","credentials","UriCache","DownlinkBuilder","scope","Downlink","delegate","LinkedDownlink","SyncedDownlink","ListDownlink","MapDownlink","primaryKey","primaryKeyOption","sortBy","sortByOption","baseUri","size","uri","Array","proto","WebSocket","w3cwebsocket","info","onConnect","onDisconnect","onError","onAuthorize","onDeauthorize","name","args","extractHostUri","resolveNodeUri","getOrCreateChannel","channels","authorize","downlink","link","callChannelWithLinkArgs","arguments","sync","syncList","syncMap","command","host","close","scheme","authority","resolve","get","isConnected","isAuthorized","session","registerDownlink","unregisterDownlink","__proto__","onChannelClose","downlinks","splice","unregisterDelegate","protocols","maxReconnectTimeout","idleTimeout","sendBufferSize","socket","readyState","OPEN","unresolvedUri","uriCache","unresolve","resolvedUri","equal","request","open","message","delegates","clearIdle","nodeDownlinks","laneDownlinks","onChannelConnect","keys","watchIdle","onUnlinkRequest","onEnvelope","isEventMessage","onEventMessage","isCommandMessage","onCommandMessage","isLinkRequest","onLinkRequest","isLinkedResponse","onLinkedResponse","isSyncRequest","onSyncRequest","isSyncedResponse","onSyncedResponse","isUnlinkRequest","isUnlinkedResponse","onUnlinkedResponse","isAuthRequest","onAuthRequest","isAuthedResponse","onAuthedResponse","isDeauthRequest","onDeauthRequest","isDeauthedResponse","onDeauthedResponse","resolvedMessage","response","resolvedResponse","onChannelAuthorize","onChannelDeauthorize","onChannelDisconnect","slice","onChannelError","clearReconnect","onopen","onWebSocketOpen","bind","onmessage","onWebSocketMessage","onerror","onWebSocketError","onclose","onWebSocketClose","reconnect","reconnectTimer","reconnectTimeout","Math","min","jitter","random","setTimeout","clearTimeout","idleTimer","sendBuffer","checkIdle","text","send","shift","data","keepAlive","onEvent","callback","proxy","onCommand","onLink","onLinked","onSync","onSynced","onUnlink","onUnlinked","onClose","key","configure","normalize","set","index","remoteUpdate","remoteInsert","from","to","remoteMove","remoteRemove","remoteClear","remoteAppend","state","fromIndex","toIndex","@update","pop","@remove","unshift","@insert","move","removed","@move","start","deleteCount","clear","@clear","forEach","thisArg","remoteDelete","remoteSet","table","oldValue","id","sort","has","values","split","identityKey","x","y","compare","hashBucket","abs","hash","cacheEntry","resolveCache","unresolved","resolved","base","unresolveCache","rotl","distance","mix","mash","charAt","swim-proto-js","websocket"],"mappings":"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","file":"swim-client.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.4.2\"}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.swim || (g.swim = {})).client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.2\"}\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.1\"}\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n    case '@auth': return AuthRequest.decode(record);\n    case '@authed': return AuthedResponse.decode(record);\n    case '@deauth': return DeauthRequest.decode(record);\n    case '@deauthed': return DeauthedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nfunction AuthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nAuthRequest.prototype = Object.create(RequestEnvelope.prototype);\nAuthRequest.prototype.constructor = AuthRequest;\nObject.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});\nAuthRequest.prototype.encode = function () {\n  return recon.concat({'@auth': null}, this.body);\n};\nAuthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthRequest(body);\n};\n\n\nfunction AuthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nAuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nAuthedResponse.prototype.constructor = AuthedResponse;\nObject.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});\nAuthedResponse.prototype.encode = function () {\n  return recon.concat({'@authed': null}, this.body);\n};\nAuthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthedResponse(body);\n};\n\n\nfunction DeauthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nDeauthRequest.prototype = Object.create(RequestEnvelope.prototype);\nDeauthRequest.prototype.constructor = DeauthRequest;\nObject.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});\nDeauthRequest.prototype.encode = function () {\n  return recon.concat({'@deauth': null}, this.body);\n};\nDeauthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthRequest(body);\n};\n\n\nfunction DeauthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nDeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nDeauthedResponse.prototype.constructor = DeauthedResponse;\nObject.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});\nDeauthedResponse.prototype.encode = function () {\n  return recon.concat({'@deauthed': null}, this.body);\n};\nDeauthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthedResponse(body);\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.AuthRequest = AuthRequest;\nexports.AuthedResponse = AuthedResponse;\nexports.DeauthRequest = DeauthRequest;\nexports.DeauthedResponse = DeauthedResponse;\nexports.config = config;\n\n},{\"./config.json\":3,\"recon-js\":\"recon-js\"}],\"swim-client-js\":[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n}\nObject.defineProperty(Client.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(this, hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.authorize = function (hostUri, credentials) {\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.authorize(credentials);\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope(channel) {\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n  channel.registerDelegate(this);\n}\nObject.defineProperty(Scope.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  this.channel.unregisterDelegate(this);\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.authorize = function (credentials) {\n  this.channel.authorize(credentials);\n};\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(client, hostUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'client', {value: client, configurable: true});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});\n  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});\n  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'delegates', {value: [], configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nObject.defineProperty(Channel.prototype, 'isConnected', {\n  get: function () {\n    return this.socket && this.socket.readyState === this.socket.OPEN;\n  },\n  enumerable: true\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.authorize = function (credentials) {\n  if (recon.equal(credentials, this.credentials)) return;\n  this.credentials = credentials;\n  if (this.isConnected) {\n    var request = new proto.AuthRequest(credentials);\n    this.push(request);\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDelegate = function (delegate) {\n  this.delegates.push(delegate);\n};\nChannel.prototype.unregisterDelegate = function (delegate) {\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    if (this.delegates[i] === delegate) {\n      this.delegates.splice(i, 1);\n    }\n  }\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.isConnected) {\n    downlink.onChannelConnect({hostUri: this.hostUri});\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.isConnected) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  } else if (envelope.isAuthRequest) {\n    this.onAuthRequest(envelope);\n  } else if (envelope.isAuthedResponse) {\n    this.onAuthedResponse(envelope);\n  } else if (envelope.isDeauthRequest) {\n    this.onDeauthRequest(envelope);\n  } else if (envelope.isDeauthedResponse) {\n    this.onDeauthedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onAuthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onAuthedResponse = function (response) {\n  this.isAuthorized = true;\n  this.session = response.body;\n  var info = {hostUri: this.hostUri, session: this.session};\n  this.client.onChannelAuthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelAuthorize(info);\n  }\n};\nChannel.prototype.onDeauthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onDeauthedResponse = function (response) {\n  this.isAuthorized = false;\n  this.session = null;\n  var info = {hostUri: this.hostUri, session: response.body};\n  this.client.onChannelDeauthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDeauthorize(info);\n  }\n};\nChannel.prototype.onConnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelConnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelConnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelDisconnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDisconnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelError(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelError(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError(info);\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  this.clearReconnect();\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearReconnect();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearReconnect = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.isConnected && this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.isConnected) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  if (this.credentials) {\n    var request = new proto.AuthRequest(this.credentials);\n    this.push(request);\n  }\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.isAuthorized = false;\n  this.session = null;\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function () {\n  this.options.keepAlive = true;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect(info);\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = arguments[i];\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = arguments[i];\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = arguments[i];\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove' || tag === '@delete') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        this.remoteSet(key, message.body);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var oldValue = this.state[i];\n      var id = this.primaryKey(oldValue);\n      if (recon.equal(key, id)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var oldValue = this.state[i];\n    var id = this.primaryKey(oldValue);\n    if (recon.equal(key, id)) {\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var id = this.primaryKey(value);\n    if (recon.equal(key, id)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body = recon.concat(recon({'@remove': null}), value);\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = this.primaryKey(value);\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return MapDownlink.identityKey;\n  }\n};\nMapDownlink.identityKey = function (value) { return value; };\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./config.json\":1,\"recon-js\":\"recon-js\",\"swim-proto-js\":4,\"websocket\":2}]},{},[])(\"swim-client-js\")\n});\n\n","module.exports={\"version\":\"0.4.1\"}","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n    case '@auth': return AuthRequest.decode(record);\n    case '@authed': return AuthedResponse.decode(record);\n    case '@deauth': return DeauthRequest.decode(record);\n    case '@deauthed': return DeauthedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nfunction AuthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nAuthRequest.prototype = Object.create(RequestEnvelope.prototype);\nAuthRequest.prototype.constructor = AuthRequest;\nObject.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});\nAuthRequest.prototype.encode = function () {\n  return recon.concat({'@auth': null}, this.body);\n};\nAuthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthRequest(body);\n};\n\n\nfunction AuthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nAuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nAuthedResponse.prototype.constructor = AuthedResponse;\nObject.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});\nAuthedResponse.prototype.encode = function () {\n  return recon.concat({'@authed': null}, this.body);\n};\nAuthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthedResponse(body);\n};\n\n\nfunction DeauthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nDeauthRequest.prototype = Object.create(RequestEnvelope.prototype);\nDeauthRequest.prototype.constructor = DeauthRequest;\nObject.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});\nDeauthRequest.prototype.encode = function () {\n  return recon.concat({'@deauth': null}, this.body);\n};\nDeauthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthRequest(body);\n};\n\n\nfunction DeauthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nDeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nDeauthedResponse.prototype.constructor = DeauthedResponse;\nObject.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});\nDeauthedResponse.prototype.encode = function () {\n  return recon.concat({'@deauthed': null}, this.body);\n};\nDeauthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthedResponse(body);\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.AuthRequest = AuthRequest;\nexports.AuthedResponse = AuthedResponse;\nexports.DeauthRequest = DeauthRequest;\nexports.DeauthedResponse = DeauthedResponse;\nexports.config = config;\n","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n}\nObject.defineProperty(Client.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(this, hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.authorize = function (hostUri, credentials) {\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.authorize(credentials);\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope(channel) {\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n  channel.registerDelegate(this);\n}\nObject.defineProperty(Scope.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  this.channel.unregisterDelegate(this);\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.authorize = function (credentials) {\n  this.channel.authorize(credentials);\n};\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(client, hostUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'client', {value: client, configurable: true});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});\n  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});\n  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'delegates', {value: [], configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nObject.defineProperty(Channel.prototype, 'isConnected', {\n  get: function () {\n    return this.socket && this.socket.readyState === this.socket.OPEN;\n  },\n  enumerable: true\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.authorize = function (credentials) {\n  if (recon.equal(credentials, this.credentials)) return;\n  this.credentials = credentials;\n  if (this.isConnected) {\n    var request = new proto.AuthRequest(credentials);\n    this.push(request);\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDelegate = function (delegate) {\n  this.delegates.push(delegate);\n};\nChannel.prototype.unregisterDelegate = function (delegate) {\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    if (this.delegates[i] === delegate) {\n      this.delegates.splice(i, 1);\n    }\n  }\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.isConnected) {\n    downlink.onChannelConnect({hostUri: this.hostUri});\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.isConnected) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  } else if (envelope.isAuthRequest) {\n    this.onAuthRequest(envelope);\n  } else if (envelope.isAuthedResponse) {\n    this.onAuthedResponse(envelope);\n  } else if (envelope.isDeauthRequest) {\n    this.onDeauthRequest(envelope);\n  } else if (envelope.isDeauthedResponse) {\n    this.onDeauthedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onAuthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onAuthedResponse = function (response) {\n  this.isAuthorized = true;\n  this.session = response.body;\n  var info = {hostUri: this.hostUri, session: this.session};\n  this.client.onChannelAuthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelAuthorize(info);\n  }\n};\nChannel.prototype.onDeauthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onDeauthedResponse = function (response) {\n  this.isAuthorized = false;\n  this.session = null;\n  var info = {hostUri: this.hostUri, session: response.body};\n  this.client.onChannelDeauthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDeauthorize(info);\n  }\n};\nChannel.prototype.onConnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelConnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelConnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelDisconnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDisconnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelError(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelError(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError(info);\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  this.clearReconnect();\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearReconnect();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearReconnect = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.isConnected && this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.isConnected) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  if (this.credentials) {\n    var request = new proto.AuthRequest(this.credentials);\n    this.push(request);\n  }\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.isAuthorized = false;\n  this.session = null;\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function () {\n  this.options.keepAlive = true;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect(info);\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = arguments[i];\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = arguments[i];\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = arguments[i];\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove' || tag === '@delete') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        this.remoteSet(key, message.body);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var oldValue = this.state[i];\n      var id = this.primaryKey(oldValue);\n      if (recon.equal(key, id)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var oldValue = this.state[i];\n    var id = this.primaryKey(oldValue);\n    if (recon.equal(key, id)) {\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var id = this.primaryKey(value);\n    if (recon.equal(key, id)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body = recon.concat(recon({'@remove': null}), value);\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = this.primaryKey(value);\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return MapDownlink.identityKey;\n  }\n};\nMapDownlink.identityKey = function (value) { return value; };\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n"],"sourceRoot":"/source/"}