{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","swim-client.min.js","node_modules/swim-proto-js/config.json","node_modules/swim-proto-js/swim-proto.js","swim-client.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","swim","client","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version",2,3,4,"decode","record","recon","tag","EventMessage","CommandMessage","LinkRequest","LinkedResponse","SyncRequest","SyncedResponse","UnlinkRequest","UnlinkedResponse","encode","envelope","parse","string","stringify","Envelope","RequestEnvelope","ResponseEnvelope","MessageEnvelope","node","lane","body","prio","config","Object","defineProperty","prototype","value","create","constructor","withAddress","undefined","headers","concat","@event","tail","head","header","@command","push","@link","@linked","@sync","@synced","@unlink","@unlinked","./config.json","recon-js","swim-client-js","Client","options","enumerable","configurable","Scope","HostScope","channel","hostUri","NodeScope","nodeUri","LaneScope","laneUri","Channel","UriCache","writable","ChannelDownlink","ChannelLinkedDownlink","ChannelSyncedDownlink","ChannelMapDownlink","primaryKey","state","baseUri","size","uri","Array","proto","WebSocket","w3cwebsocket","getOrCreateChannel","channels","link","arguments","extractHostUri","resolveNodeUri","sync","syncMap","args","apply","command","host","close","scheme","authority","resolve","registerDownlink","downlink","scope","unregisterDownlink","__proto__","onChannelClose","downlinks","splice","get","protocols","maxReconnectTimeout","idleTimeout","sendBufferSize","unresolvedUri","uriCache","unresolve","resolvedUri","arg","message","clearIdle","nodeDownlinks","laneDownlinks","socket","readyState","OPEN","onChannelConnect","open","keys","watchIdle","request","onUnlinkRequest","onEnvelope","isEventMessage","onEventMessage","isCommandMessage","onCommandMessage","isLinkRequest","onLinkRequest","isLinkedResponse","onLinkedResponse","isSyncRequest","onSyncRequest","isSyncedResponse","onSyncedResponse","isUnlinkRequest","isUnlinkedResponse","onUnlinkedResponse","resolvedMessage","response","resolvedResponse","onConnect","onDisconnect","slice","onChannelDisconnect","onError","onChannelError","reconnectTimer","clearTimeout","reconnectTimeout","onopen","onWebSocketOpen","bind","onmessage","onWebSocketMessage","onerror","onWebSocketError","onclose","onWebSocketClose","reconnect","Math","min","jitter","random","setTimeout","idleTimer","sendBuffer","checkIdle","text","send","shift","data","keepAlive","set","delegate","onEvent","onCommand","onLink","onLinked","onSync","onSynced","onUnlink","onUnlinked","onClose","key","remove","has","@remove","clear","@clear","values","forEach","callback","thisArg","hashBucket","abs","hash","cacheEntry","resolveCache","unresolved","resolved","base","unresolveCache","rotl","distance","mix","mash","charAt","swim-proto-js","websocket"],"mappings":"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","file":"swim-client.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.4.0\"}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.swim || (g.swim = {})).client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.0\"}\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.0\"}\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.config = config;\n\n},{\"./config.json\":3,\"recon-js\":\"recon-js\"}],\"swim-client-js\":[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n}\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.link = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.link(nodeUri, laneUri, options);\n};\nClient.prototype.sync = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.sync(nodeUri, laneUri, options);\n};\nClient.prototype.syncMap = function () {\n  var hostUri, nodeUri, args, i, n;\n  if (arguments.length >= 3 && typeof arguments[2] === 'string') {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    args = [nodeUri];\n    for (i = 2, n = arguments.length; i < n; i += 1) {\n      args.push(arguments[i]);\n    }\n  } else {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n    args = [nodeUri];\n    for (i = 1, n = arguments.length; i < n; i += 1) {\n      args.push(arguments[i]);\n    }\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.syncMap.apply(channel, args);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope() {\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function () {\n  arguments[0] = Client.resolveNodeUri(this.hostUri, arguments[0]);\n  var downlink = this.channel.syncMap.apply(this.channel, arguments);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function () {\n  var args = [this.nodeUri];\n  Array.prototype.push.apply(args, arguments);\n  var downlink = this.channel.syncMap.apply(this.channel, args);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function () {\n  var args = [this.nodeUri, this.laneUri];\n  Array.prototype.push.apply(args, arguments);\n  var downlink = this.channel.syncMap.apply(this.channel, args);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(hostUri, options) {\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelLinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelSyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function () {\n  var nodeUri = arguments[0];\n  var laneUri = arguments[1];\n  var options, primaryKey;\n  for (var i = 2, n = arguments.length; i < n; i += 1) {\n    var arg = arguments[i];\n    if (typeof arg === 'function') {\n      primaryKey = arg;\n    } else if (typeof arg === 'object') {\n      options = arg;\n    }\n  }\n  primaryKey = primaryKey || function (body) { return body; };\n  var downlink = new ChannelMapDownlink(this, this.hostUri, nodeUri, laneUri, options, primaryKey);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    downlink.onChannelConnect();\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.socket && this.socket.readyState === this.socket.OPEN) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onConnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect();\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect();\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError();\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.socket && this.socket.readyState === this.socket.OPEN &&\n      this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction ChannelDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: this, writable: true});\n}\nObject.defineProperty(ChannelDownlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'connected', {\n  get: function () {\n    var socket = this.channel.socket;\n    return socket && socket.readyState === socket.OPEN;\n  },\n  enumerable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelDisconnect', {\n  value: function () {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect();\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelError', {\n  value: function () {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nChannelDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction ChannelLinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelLinkedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelLinkedDownlink.prototype.constructor = ChannelLinkedDownlink;\nObject.defineProperty(ChannelLinkedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ChannelSyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelSyncedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelSyncedDownlink.prototype.constructor = ChannelSyncedDownlink;\nObject.defineProperty(ChannelSyncedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ChannelMapDownlink(channel, hostUri, nodeUri, laneUri, options, primaryKey) {\n  ChannelSyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  this.primaryKey = primaryKey;\n  this.state = [];\n}\nChannelMapDownlink.prototype = Object.create(ChannelSyncedDownlink.prototype);\nChannelMapDownlink.prototype.constructor = ChannelMapDownlink;\nObject.defineProperty(ChannelMapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        recon.remove(this.state, key);\n      }\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        recon.set(this.state, key, message.body);\n      }\n    }\n    ChannelSyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelMapDownlink.prototype, 'size', {\n  get: function () {\n    return recon.size(this.state);\n  },\n  configurable: true,\n  enumerable: true\n});\nChannelMapDownlink.prototype.has = function (key) {\n  return recon.has(this.state, key);\n};\nChannelMapDownlink.prototype.get = function (key) {\n  return recon.get(this.state, key);\n};\nChannelMapDownlink.prototype.set = function (key, value) {\n  recon.set(this.state, key, value);\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nChannelMapDownlink.prototype.delete = function (key) {\n  var value = recon.get(this.state, key);\n  if (value !== undefined) {\n    recon.remove(this.state, key);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat({'@remove': null}, value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n    return true;\n  } else {\n    return false;\n  }\n};\nChannelMapDownlink.prototype.clear = function () {\n  this.state = [];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, {'@clear': null});\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nChannelMapDownlink.prototype.keys = function () {\n  return recon.keys(this.state);\n};\nChannelMapDownlink.prototype.values = function () {\n  return recon.values(this.state);\n};\nChannelMapDownlink.prototype.forEach = function (callback, thisArg) {\n  return recon.forEach(this.state, callback, thisArg);\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./config.json\":1,\"recon-js\":\"recon-js\",\"swim-proto-js\":4,\"websocket\":2}]},{},[])(\"swim-client-js\")\n});\n\n","module.exports={\"version\":\"0.4.0\"}","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.config = config;\n","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n}\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.link = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.link(nodeUri, laneUri, options);\n};\nClient.prototype.sync = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.sync(nodeUri, laneUri, options);\n};\nClient.prototype.syncMap = function () {\n  var hostUri, nodeUri, args, i, n;\n  if (arguments.length >= 3 && typeof arguments[2] === 'string') {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    args = [nodeUri];\n    for (i = 2, n = arguments.length; i < n; i += 1) {\n      args.push(arguments[i]);\n    }\n  } else {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n    args = [nodeUri];\n    for (i = 1, n = arguments.length; i < n; i += 1) {\n      args.push(arguments[i]);\n    }\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.syncMap.apply(channel, args);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope() {\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function () {\n  arguments[0] = Client.resolveNodeUri(this.hostUri, arguments[0]);\n  var downlink = this.channel.syncMap.apply(this.channel, arguments);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function () {\n  var args = [this.nodeUri];\n  Array.prototype.push.apply(args, arguments);\n  var downlink = this.channel.syncMap.apply(this.channel, args);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function () {\n  var args = [this.nodeUri, this.laneUri];\n  Array.prototype.push.apply(args, arguments);\n  var downlink = this.channel.syncMap.apply(this.channel, args);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(hostUri, options) {\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelLinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelSyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function () {\n  var nodeUri = arguments[0];\n  var laneUri = arguments[1];\n  var options, primaryKey;\n  for (var i = 2, n = arguments.length; i < n; i += 1) {\n    var arg = arguments[i];\n    if (typeof arg === 'function') {\n      primaryKey = arg;\n    } else if (typeof arg === 'object') {\n      options = arg;\n    }\n  }\n  primaryKey = primaryKey || function (body) { return body; };\n  var downlink = new ChannelMapDownlink(this, this.hostUri, nodeUri, laneUri, options, primaryKey);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    downlink.onChannelConnect();\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.socket && this.socket.readyState === this.socket.OPEN) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onConnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect();\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect();\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError();\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.socket && this.socket.readyState === this.socket.OPEN &&\n      this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction ChannelDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: this, writable: true});\n}\nObject.defineProperty(ChannelDownlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'connected', {\n  get: function () {\n    var socket = this.channel.socket;\n    return socket && socket.readyState === socket.OPEN;\n  },\n  enumerable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelDisconnect', {\n  value: function () {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect();\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelError', {\n  value: function () {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nChannelDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction ChannelLinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelLinkedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelLinkedDownlink.prototype.constructor = ChannelLinkedDownlink;\nObject.defineProperty(ChannelLinkedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ChannelSyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelSyncedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelSyncedDownlink.prototype.constructor = ChannelSyncedDownlink;\nObject.defineProperty(ChannelSyncedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ChannelMapDownlink(channel, hostUri, nodeUri, laneUri, options, primaryKey) {\n  ChannelSyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  this.primaryKey = primaryKey;\n  this.state = [];\n}\nChannelMapDownlink.prototype = Object.create(ChannelSyncedDownlink.prototype);\nChannelMapDownlink.prototype.constructor = ChannelMapDownlink;\nObject.defineProperty(ChannelMapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        recon.remove(this.state, key);\n      }\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        recon.set(this.state, key, message.body);\n      }\n    }\n    ChannelSyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelMapDownlink.prototype, 'size', {\n  get: function () {\n    return recon.size(this.state);\n  },\n  configurable: true,\n  enumerable: true\n});\nChannelMapDownlink.prototype.has = function (key) {\n  return recon.has(this.state, key);\n};\nChannelMapDownlink.prototype.get = function (key) {\n  return recon.get(this.state, key);\n};\nChannelMapDownlink.prototype.set = function (key, value) {\n  recon.set(this.state, key, value);\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nChannelMapDownlink.prototype.delete = function (key) {\n  var value = recon.get(this.state, key);\n  if (value !== undefined) {\n    recon.remove(this.state, key);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat({'@remove': null}, value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n    return true;\n  } else {\n    return false;\n  }\n};\nChannelMapDownlink.prototype.clear = function () {\n  this.state = [];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, {'@clear': null});\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nChannelMapDownlink.prototype.keys = function () {\n  return recon.keys(this.state);\n};\nChannelMapDownlink.prototype.values = function () {\n  return recon.values(this.state);\n};\nChannelMapDownlink.prototype.forEach = function (callback, thisArg) {\n  return recon.forEach(this.state, callback, thisArg);\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n"],"sourceRoot":"/source/"}