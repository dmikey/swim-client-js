{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","swim-client.min.js","node_modules/swim-proto-js/config.json","node_modules/swim-proto-js/swim-proto.js","swim-client.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","swim","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version",2,3,4,"decode","record","recon","tag","EventMessage","CommandMessage","LinkRequest","LinkedResponse","SyncRequest","SyncedResponse","UnlinkRequest","UnlinkedResponse","AuthRequest","AuthedResponse","DeauthRequest","DeauthedResponse","encode","envelope","parse","string","stringify","Envelope","RequestEnvelope","ResponseEnvelope","MessageEnvelope","node","lane","body","prio","config","Object","defineProperty","prototype","value","create","constructor","withAddress","undefined","headers","concat","@event","tail","head","header","@command","push","@link","@linked","@sync","@synced","@unlink","@unlinked","@auth","@authed","@deauth","@deauthed","./config.json","recon-js","swim-client-js","Client","options","enumerable","configurable","writable","Scope","channel","registerDelegate","HostScope","hostUri","NodeScope","nodeUri","LaneScope","laneUri","Channel","client","credentials","UriCache","checkBackpressure","bind","checkIdle","DownlinkBuilder","scope","Downlink","delegate","LinkedDownlink","SyncedDownlink","ListDownlink","MapDownlink","primaryKey","primaryKeyOption","sortBy","sortByOption","baseUri","size","uri","Array","proto","WebSocket","w3cwebsocket","info","onConnect","onDisconnect","onError","onAuthorize","onDeauthorize","name","args","extractHostUri","resolveNodeUri","getOrCreateChannel","channels","authorize","downlink","link","callChannelWithLinkArgs","arguments","sync","syncList","syncMap","command","host","close","scheme","authority","resolve","get","isConnected","isAuthorized","session","registerDownlink","unregisterDownlink","__proto__","onChannelClose","downlinks","splice","unregisterDelegate","protocols","maxReconnectTimeout","backpressureTimeout","idleTimeout","commandQueueLength","sendBufferSize","socket","readyState","OPEN","unresolvedUri","uriCache","unresolve","resolvedUri","equal","request","open","message","delegates","clearIdle","nodeDownlinks","laneDownlinks","onChannelConnect","keys","watchIdle","onUnlinkRequest","onEnvelope","isEventMessage","onEventMessage","isCommandMessage","onCommandMessage","isLinkRequest","onLinkRequest","isLinkedResponse","onLinkedResponse","isSyncRequest","onSyncRequest","isSyncedResponse","onSyncedResponse","isUnlinkRequest","isUnlinkedResponse","onUnlinkedResponse","isAuthRequest","onAuthRequest","isAuthedResponse","onAuthedResponse","isDeauthRequest","onDeauthRequest","isDeauthedResponse","onDeauthedResponse","resolvedMessage","response","resolvedResponse","onChannelAuthorize","onChannelDeauthorize","onChannelDisconnect","slice","onChannelError","clearReconnect","onopen","onWebSocketOpen","onmessage","onWebSocketMessage","onerror","onWebSocketError","onclose","onWebSocketClose","clearBackpressure","reconnect","reconnectTimer","reconnectTimeout","Math","min","jitter","random","setTimeout","clearTimeout","backpressureTimer","watchBackpressure","console","log","drainSendQueue","sendQueue","bufferedAmount","idleTimer","commandQueue","drainCommandQueue","shift","text","send","data","keepAlive","onEvent","callback","proxy","onCommand","onLink","onLinked","onSync","onSynced","onUnlink","onUnlinked","onClose","key","configure","normalize","set","index","remoteUpdate","remoteInsert","from","to","remoteMove","remoteRemove","remoteClear","remoteAppend","state","fromIndex","toIndex","@update","pop","@remove","unshift","@insert","move","removed","@move","start","deleteCount","clear","@clear","forEach","thisArg","remoteDelete","remoteSet","table","oldValue","id","sort","has","values","split","identityKey","x","y","compare","hashBucket","abs","hash","cacheEntry","resolveCache","unresolved","resolved","base","unresolveCache","rotl","distance","mix","mash","charAt","swim-proto-js","websocket"],"mappings":"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","file":"swim-client.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.4.6\"}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.swim = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.6\"}\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.2\"}\n},{}],4:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = global.recon || require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n    case '@auth': return AuthRequest.decode(record);\n    case '@authed': return AuthedResponse.decode(record);\n    case '@deauth': return DeauthRequest.decode(record);\n    case '@deauthed': return DeauthedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nfunction AuthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nAuthRequest.prototype = Object.create(RequestEnvelope.prototype);\nAuthRequest.prototype.constructor = AuthRequest;\nObject.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});\nAuthRequest.prototype.encode = function () {\n  return recon.concat({'@auth': null}, this.body);\n};\nAuthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthRequest(body);\n};\n\n\nfunction AuthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nAuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nAuthedResponse.prototype.constructor = AuthedResponse;\nObject.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});\nAuthedResponse.prototype.encode = function () {\n  return recon.concat({'@authed': null}, this.body);\n};\nAuthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthedResponse(body);\n};\n\n\nfunction DeauthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nDeauthRequest.prototype = Object.create(RequestEnvelope.prototype);\nDeauthRequest.prototype.constructor = DeauthRequest;\nObject.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});\nDeauthRequest.prototype.encode = function () {\n  return recon.concat({'@deauth': null}, this.body);\n};\nDeauthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthRequest(body);\n};\n\n\nfunction DeauthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nDeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nDeauthedResponse.prototype.constructor = DeauthedResponse;\nObject.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});\nDeauthedResponse.prototype.encode = function () {\n  return recon.concat({'@deauthed': null}, this.body);\n};\nDeauthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthedResponse(body);\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.AuthRequest = AuthRequest;\nexports.AuthedResponse = AuthedResponse;\nexports.DeauthRequest = DeauthRequest;\nexports.DeauthedResponse = DeauthedResponse;\nexports.config = config;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./config.json\":3,\"recon-js\":\"recon-js\"}],\"swim-client-js\":[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = global.recon || require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n}\nObject.defineProperty(Client.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(this, hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.authorize = function (hostUri, credentials) {\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.authorize(credentials);\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope(channel) {\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n  channel.registerDelegate(this);\n}\nObject.defineProperty(Scope.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  this.channel.unregisterDelegate(this);\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.close();\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.authorize = function (credentials) {\n  this.channel.authorize(credentials);\n};\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(client, hostUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'client', {value: client, configurable: true});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});\n  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});\n  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'delegates', {value: [], configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'commandQueue', {value: [], configurable: true});\n  Object.defineProperty(this, 'sendQueue', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'backpressureTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n  Object.defineProperty(this, 'checkBackpressure', {value: this.checkBackpressure.bind(this), configurable: true});\n  Object.defineProperty(this, 'checkIdle', {value: this.checkIdle.bind(this), configurable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'backpressureTimeout', {\n  get: function () {\n    return this.options.backpressureTimeout || 100;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'commandQueueLength', {\n  get: function () {\n    return this.options.commandQueueLength || 1024;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 32768;\n  }\n});\nObject.defineProperty(Channel.prototype, 'isConnected', {\n  get: function () {\n    return this.socket && this.socket.readyState === this.socket.OPEN;\n  },\n  enumerable: true\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.authorize = function (credentials) {\n  if (recon.equal(credentials, this.credentials)) return;\n  this.credentials = credentials;\n  if (this.isConnected) {\n    var request = new proto.AuthRequest(credentials);\n    this.push(request);\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDelegate = function (delegate) {\n  this.delegates.push(delegate);\n};\nChannel.prototype.unregisterDelegate = function (delegate) {\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    if (this.delegates[i] === delegate) {\n      this.delegates.splice(i, 1);\n    }\n  }\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.isConnected) {\n    downlink.onChannelConnect({hostUri: this.hostUri});\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.isConnected) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  } else if (envelope.isAuthRequest) {\n    this.onAuthRequest(envelope);\n  } else if (envelope.isAuthedResponse) {\n    this.onAuthedResponse(envelope);\n  } else if (envelope.isDeauthRequest) {\n    this.onDeauthRequest(envelope);\n  } else if (envelope.isDeauthedResponse) {\n    this.onDeauthedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onAuthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onAuthedResponse = function (response) {\n  this.isAuthorized = true;\n  this.session = response.body;\n  var info = {hostUri: this.hostUri, session: this.session};\n  this.client.onChannelAuthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelAuthorize(info);\n  }\n};\nChannel.prototype.onDeauthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onDeauthedResponse = function (response) {\n  this.isAuthorized = false;\n  this.session = null;\n  var info = {hostUri: this.hostUri, session: response.body};\n  this.client.onChannelDeauthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDeauthorize(info);\n  }\n};\nChannel.prototype.onConnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelConnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelConnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelDisconnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDisconnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelError(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelError(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError(info);\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  this.clearReconnect();\n  if (!this.socket) {\n    this.socket = this.protocols ?\n      new WebSocket(this.hostUri, this.protocols) :\n      new WebSocket(this.hostUri);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearReconnect();\n  this.clearBackpressure();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearReconnect = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n};\nChannel.prototype.clearBackpressure = function () {\n  if (this.backpressureTimer) {\n    clearTimeout(this.backpressureTimer);\n    this.backpressureTimer = null;\n  }\n};\nChannel.prototype.watchBackpressure = function () {\n  if (!this.backpressureTimer) {\n    console.log('watching backpressure');\n    this.backpressureTimer = setTimeout(this.checkBackpressure, this.backpressureTimeout);\n  }\n};\nChannel.prototype.checkBackpressure = function () {\n  console.log('checking backpressure');\n  if (this.isConnected) {\n    this.backpressureTimer = null;\n    this.drainSendQueue();\n    if (this.sendQueue.length > 0) {\n      console.log('partially drained bufferedAmount: ' + this.socket.bufferedAmount);\n      this.backpressureTimer = setTimeout(this.checkBackpressure, this.backpressureTimeout);\n    } else {\n      console.log('fully drained buffer');\n      this.watchIdle();\n    }\n  }\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.isConnected && this.commandQueue.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle, this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.commandQueue.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.drainCommandQueue = function () {\n  var envelope;\n  while ((envelope = this.commandQueue.shift())) {\n    this.push(envelope);\n  }\n};\nChannel.prototype.drainSendQueue = function () {\n  var envelope;\n  while (this.socket.bufferedAmount < this.sendBufferSize && (envelope = this.sendQueue.shift())) {\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.isConnected) {\n    this.clearIdle();\n    this.drainSendQueue();\n    if (this.socket.bufferedAmount < this.sendBufferSize) {\n      var text = proto.stringify(envelope);\n      this.socket.send(text);\n      this.watchIdle();\n    } else {\n      console.log('BACKPRESSURE: ' + this.socket.bufferedAmount);\n      this.sendQueue.push(envelope);\n      this.watchBackpressure();\n    }\n  } else if (envelope.isCommandMessage) {\n    if (this.commandQueue.length < this.commandQueueLength) {\n      this.commandQueue.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  if (this.credentials) {\n    var request = new proto.AuthRequest(this.credentials);\n    this.push(request);\n  }\n  this.onConnect();\n  this.drainCommandQueue();\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearBackpressure();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.isAuthorized = false;\n  this.session = null;\n  this.socket = null;\n  this.onDisconnect();\n  this.clearBackpressure();\n  this.clearIdle();\n  var envelope;\n  while ((envelope = this.sendQueue.shift())) {\n    if (envelope.isCommandMessage) {\n      this.commandQueue.push(envelope);\n    }\n  }\n  if (this.commandQueue.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  if (!arguments.length) return this.hostUri;\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  if (!arguments.length) return this.nodeUri;\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  if (!arguments.length) return this.laneUri;\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  if (!arguments.length) return this.options.prio;\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function (keepAlive) {\n  if (!arguments.length) return this.options.keepAlive;\n  this.options.keepAlive = keepAlive;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  if (!arguments.length) return this.options.delegate;\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  if (!arguments.length) return this.proxy.onEvent;\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  if (!arguments.length) return this.proxy.onCommand;\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  if (!arguments.length) return this.proxy.onLink;\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  if (!arguments.length) return this.proxy.onLinked;\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  if (!arguments.length) return this.proxy.onSync;\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  if (!arguments.length) return this.proxy.onSynced;\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  if (!arguments.length) return this.proxy.onUnlink;\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  if (!arguments.length) return this.proxy.onUnlinked;\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  if (!arguments.length) return this.proxy.onConnect;\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  if (!arguments.length) return this.proxy.onDisconnect;\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  if (!arguments.length) return this.proxy.onError;\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  if (!arguments.length) return this.proxy.onClose;\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  if (!arguments.length) return this.options.primaryKey;\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  if (!arguments.length) return this.options.sortBy;\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect(info);\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  value = recon(value !== undefined ? value : this.get(index));\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = recon(arguments[i]);\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = recon(arguments[i]);\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = recon(arguments[i]);\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove' || tag === '@delete') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        this.remoteSet(key, message.body);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var oldValue = this.state[i];\n      var id = this.primaryKey(oldValue);\n      if (recon.equal(key, id)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  value = recon(value !== undefined ? value : this.get(key));\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var oldValue = this.state[i];\n    var id = this.primaryKey(oldValue);\n    if (recon.equal(key, id)) {\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var id = this.primaryKey(value);\n    if (recon.equal(key, id)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body = recon.concat(recon({'@remove': null}), value);\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = this.primaryKey(value);\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return MapDownlink.identityKey;\n  }\n};\nMapDownlink.identityKey = function (value) { return value; };\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\nswim.Client = Client;\nswim.Scope = Scope;\nswim.HostScope = HostScope;\nswim.NodeScope = NodeScope;\nswim.LaneScope = LaneScope;\nswim.Channel = Channel;\nswim.DownlinkBuilder = DownlinkBuilder;\nswim.Downlink = Downlink;\nswim.LinkedDownlink = LinkedDownlink;\nswim.SyncedDownlink = SyncedDownlink;\nswim.ListDownlink = ListDownlink;\nswim.MapDownlink = MapDownlink;\n\nmodule.exports = swim;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./config.json\":1,\"recon-js\":\"recon-js\",\"swim-proto-js\":4,\"websocket\":2}]},{},[])(\"swim-client-js\")\n});\n\n","module.exports={\"version\":\"0.4.2\"}","'use strict';\n\nvar config = require('./config.json');\nvar recon = global.recon || require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n    case '@auth': return AuthRequest.decode(record);\n    case '@authed': return AuthedResponse.decode(record);\n    case '@deauth': return DeauthRequest.decode(record);\n    case '@deauthed': return DeauthedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nfunction AuthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nAuthRequest.prototype = Object.create(RequestEnvelope.prototype);\nAuthRequest.prototype.constructor = AuthRequest;\nObject.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});\nAuthRequest.prototype.encode = function () {\n  return recon.concat({'@auth': null}, this.body);\n};\nAuthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthRequest(body);\n};\n\n\nfunction AuthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nAuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nAuthedResponse.prototype.constructor = AuthedResponse;\nObject.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});\nAuthedResponse.prototype.encode = function () {\n  return recon.concat({'@authed': null}, this.body);\n};\nAuthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new AuthedResponse(body);\n};\n\n\nfunction DeauthRequest(body) {\n  RequestEnvelope.call(this);\n  this.body = body;\n}\nDeauthRequest.prototype = Object.create(RequestEnvelope.prototype);\nDeauthRequest.prototype.constructor = DeauthRequest;\nObject.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});\nDeauthRequest.prototype.encode = function () {\n  return recon.concat({'@deauth': null}, this.body);\n};\nDeauthRequest.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthRequest(body);\n};\n\n\nfunction DeauthedResponse(body) {\n  ResponseEnvelope.call(this);\n  this.body = body;\n}\nDeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nDeauthedResponse.prototype.constructor = DeauthedResponse;\nObject.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});\nDeauthedResponse.prototype.encode = function () {\n  return recon.concat({'@deauthed': null}, this.body);\n};\nDeauthedResponse.decode = function (record) {\n  var body = recon.tail(record);\n  return new DeauthedResponse(body);\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.AuthRequest = AuthRequest;\nexports.AuthedResponse = AuthedResponse;\nexports.DeauthRequest = DeauthRequest;\nexports.DeauthedResponse = DeauthedResponse;\nexports.config = config;\n","'use strict';\n\nvar config = require('./config.json');\nvar recon = global.recon || require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n}\nObject.defineProperty(Client.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(this, hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.authorize = function (hostUri, credentials) {\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.authorize(credentials);\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope(channel) {\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n  channel.registerDelegate(this);\n}\nObject.defineProperty(Scope.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.onDisconnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelAuthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onAuthorize === 'function') {\n      this.onAuthorize(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Scope.prototype, 'onChannelDeauthorize', {\n  value: function (info) {\n    if (typeof this.delegate.onDeauthorize === 'function') {\n      this.onDeauthorize(info);\n    }\n  },\n  configurable: true\n});\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  this.channel.unregisterDelegate(this);\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.close();\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.authorize = function (credentials) {\n  this.channel.authorize(credentials);\n};\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this, channel);\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(client, hostUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'client', {value: client, configurable: true});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});\n  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});\n  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'delegates', {value: [], configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'commandQueue', {value: [], configurable: true});\n  Object.defineProperty(this, 'sendQueue', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'backpressureTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n  Object.defineProperty(this, 'checkBackpressure', {value: this.checkBackpressure.bind(this), configurable: true});\n  Object.defineProperty(this, 'checkIdle', {value: this.checkIdle.bind(this), configurable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'backpressureTimeout', {\n  get: function () {\n    return this.options.backpressureTimeout || 100;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'commandQueueLength', {\n  get: function () {\n    return this.options.commandQueueLength || 1024;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 32768;\n  }\n});\nObject.defineProperty(Channel.prototype, 'isConnected', {\n  get: function () {\n    return this.socket && this.socket.readyState === this.socket.OPEN;\n  },\n  enumerable: true\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.authorize = function (credentials) {\n  if (recon.equal(credentials, this.credentials)) return;\n  this.credentials = credentials;\n  if (this.isConnected) {\n    var request = new proto.AuthRequest(credentials);\n    this.push(request);\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDelegate = function (delegate) {\n  this.delegates.push(delegate);\n};\nChannel.prototype.unregisterDelegate = function (delegate) {\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    if (this.delegates[i] === delegate) {\n      this.delegates.splice(i, 1);\n    }\n  }\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.isConnected) {\n    downlink.onChannelConnect({hostUri: this.hostUri});\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.isConnected) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  } else if (envelope.isAuthRequest) {\n    this.onAuthRequest(envelope);\n  } else if (envelope.isAuthedResponse) {\n    this.onAuthedResponse(envelope);\n  } else if (envelope.isDeauthRequest) {\n    this.onDeauthRequest(envelope);\n  } else if (envelope.isDeauthedResponse) {\n    this.onDeauthedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onAuthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onAuthedResponse = function (response) {\n  this.isAuthorized = true;\n  this.session = response.body;\n  var info = {hostUri: this.hostUri, session: this.session};\n  this.client.onChannelAuthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelAuthorize(info);\n  }\n};\nChannel.prototype.onDeauthRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onDeauthedResponse = function (response) {\n  this.isAuthorized = false;\n  this.session = null;\n  var info = {hostUri: this.hostUri, session: response.body};\n  this.client.onChannelDeauthorize(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDeauthorize(info);\n  }\n};\nChannel.prototype.onConnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelConnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelConnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelDisconnect(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelDisconnect(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect(info);\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  var info = {hostUri: this.hostUri};\n  this.client.onChannelError(info);\n  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n    var delegate = this.delegates[i];\n    delegate.onChannelError(info);\n  }\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError(info);\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  this.clearReconnect();\n  if (!this.socket) {\n    this.socket = this.protocols ?\n      new WebSocket(this.hostUri, this.protocols) :\n      new WebSocket(this.hostUri);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearReconnect();\n  this.clearBackpressure();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearReconnect = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n};\nChannel.prototype.clearBackpressure = function () {\n  if (this.backpressureTimer) {\n    clearTimeout(this.backpressureTimer);\n    this.backpressureTimer = null;\n  }\n};\nChannel.prototype.watchBackpressure = function () {\n  if (!this.backpressureTimer) {\n    console.log('watching backpressure');\n    this.backpressureTimer = setTimeout(this.checkBackpressure, this.backpressureTimeout);\n  }\n};\nChannel.prototype.checkBackpressure = function () {\n  console.log('checking backpressure');\n  if (this.isConnected) {\n    this.backpressureTimer = null;\n    this.drainSendQueue();\n    if (this.sendQueue.length > 0) {\n      console.log('partially drained bufferedAmount: ' + this.socket.bufferedAmount);\n      this.backpressureTimer = setTimeout(this.checkBackpressure, this.backpressureTimeout);\n    } else {\n      console.log('fully drained buffer');\n      this.watchIdle();\n    }\n  }\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.isConnected && this.commandQueue.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle, this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.commandQueue.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.drainCommandQueue = function () {\n  var envelope;\n  while ((envelope = this.commandQueue.shift())) {\n    this.push(envelope);\n  }\n};\nChannel.prototype.drainSendQueue = function () {\n  var envelope;\n  while (this.socket.bufferedAmount < this.sendBufferSize && (envelope = this.sendQueue.shift())) {\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.isConnected) {\n    this.clearIdle();\n    this.drainSendQueue();\n    if (this.socket.bufferedAmount < this.sendBufferSize) {\n      var text = proto.stringify(envelope);\n      this.socket.send(text);\n      this.watchIdle();\n    } else {\n      console.log('BACKPRESSURE: ' + this.socket.bufferedAmount);\n      this.sendQueue.push(envelope);\n      this.watchBackpressure();\n    }\n  } else if (envelope.isCommandMessage) {\n    if (this.commandQueue.length < this.commandQueueLength) {\n      this.commandQueue.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  if (this.credentials) {\n    var request = new proto.AuthRequest(this.credentials);\n    this.push(request);\n  }\n  this.onConnect();\n  this.drainCommandQueue();\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearBackpressure();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.isAuthorized = false;\n  this.session = null;\n  this.socket = null;\n  this.onDisconnect();\n  this.clearBackpressure();\n  this.clearIdle();\n  var envelope;\n  while ((envelope = this.sendQueue.shift())) {\n    if (envelope.isCommandMessage) {\n      this.commandQueue.push(envelope);\n    }\n  }\n  if (this.commandQueue.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  if (!arguments.length) return this.hostUri;\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  if (!arguments.length) return this.nodeUri;\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  if (!arguments.length) return this.laneUri;\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  if (!arguments.length) return this.options.prio;\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function (keepAlive) {\n  if (!arguments.length) return this.options.keepAlive;\n  this.options.keepAlive = keepAlive;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  if (!arguments.length) return this.options.delegate;\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  if (!arguments.length) return this.proxy.onEvent;\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  if (!arguments.length) return this.proxy.onCommand;\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  if (!arguments.length) return this.proxy.onLink;\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  if (!arguments.length) return this.proxy.onLinked;\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  if (!arguments.length) return this.proxy.onSync;\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  if (!arguments.length) return this.proxy.onSynced;\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  if (!arguments.length) return this.proxy.onUnlink;\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  if (!arguments.length) return this.proxy.onUnlinked;\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  if (!arguments.length) return this.proxy.onConnect;\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  if (!arguments.length) return this.proxy.onDisconnect;\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  if (!arguments.length) return this.proxy.onError;\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  if (!arguments.length) return this.proxy.onClose;\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  if (!arguments.length) return this.options.primaryKey;\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  if (!arguments.length) return this.options.sortBy;\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'isConnected', {\n  get: function () {\n    return this.channel.isConnected;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'isAuthorized', {\n  get: function () {\n    return this.channel.isAuthorized;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'session', {\n  get: function () {\n    return this.channel.session;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function (info) {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect(info);\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function (info) {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError(info);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function (info) {\n    Downlink.prototype.onChannelConnect.call(this, info);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  value = recon(value !== undefined ? value : this.get(index));\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = recon(arguments[i]);\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = recon(arguments[i]);\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = recon(arguments[i]);\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove' || tag === '@delete') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        this.remoteSet(key, message.body);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var oldValue = this.state[i];\n      var id = this.primaryKey(oldValue);\n      if (recon.equal(key, id)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  value = recon(value !== undefined ? value : this.get(key));\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var oldValue = this.state[i];\n    var id = this.primaryKey(oldValue);\n    if (recon.equal(key, id)) {\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var id = this.primaryKey(value);\n    if (recon.equal(key, id)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body = recon.concat(recon({'@remove': null}), value);\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = this.primaryKey(value);\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return MapDownlink.identityKey;\n  }\n};\nMapDownlink.identityKey = function (value) { return value; };\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\nswim.Client = Client;\nswim.Scope = Scope;\nswim.HostScope = HostScope;\nswim.NodeScope = NodeScope;\nswim.LaneScope = LaneScope;\nswim.Channel = Channel;\nswim.DownlinkBuilder = DownlinkBuilder;\nswim.Downlink = Downlink;\nswim.LinkedDownlink = LinkedDownlink;\nswim.SyncedDownlink = SyncedDownlink;\nswim.ListDownlink = ListDownlink;\nswim.MapDownlink = MapDownlink;\n\nmodule.exports = swim;\n"],"sourceRoot":"/source/"}