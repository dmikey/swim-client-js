{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","swim-client.min.js","node_modules/swim-proto-js/config.json","node_modules/swim-proto-js/swim-proto.js","swim-client.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","swim","client","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version",2,3,4,"decode","record","recon","tag","EventMessage","CommandMessage","LinkRequest","LinkedResponse","SyncRequest","SyncedResponse","UnlinkRequest","UnlinkedResponse","encode","envelope","parse","string","stringify","Envelope","RequestEnvelope","ResponseEnvelope","MessageEnvelope","node","lane","body","prio","config","Object","defineProperty","prototype","value","create","constructor","withAddress","undefined","headers","concat","@event","tail","head","header","@command","push","@link","@linked","@sync","@synced","@unlink","@unlinked","./config.json","recon-js","swim-client-js","Client","options","enumerable","configurable","Scope","HostScope","channel","hostUri","NodeScope","nodeUri","LaneScope","laneUri","Channel","UriCache","writable","ChannelDownlink","ChannelLinkedDownlink","ChannelSyncedDownlink","baseUri","size","uri","Array","proto","WebSocket","w3cwebsocket","getOrCreateChannel","channels","link","arguments","extractHostUri","resolveNodeUri","sync","command","host","close","scheme","authority","resolve","registerDownlink","downlink","scope","unregisterDownlink","__proto__","onChannelClose","downlinks","splice","get","protocols","maxReconnectTimeout","idleTimeout","sendBufferSize","unresolvedUri","uriCache","unresolve","resolvedUri","message","clearIdle","nodeDownlinks","laneDownlinks","socket","readyState","OPEN","onChannelConnect","open","keys","watchIdle","request","onUnlinkRequest","onEnvelope","isEventMessage","onEventMessage","isCommandMessage","onCommandMessage","isLinkRequest","onLinkRequest","isLinkedResponse","onLinkedResponse","isSyncRequest","onSyncRequest","isSyncedResponse","onSyncedResponse","isUnlinkRequest","isUnlinkedResponse","onUnlinkedResponse","resolvedMessage","response","resolvedResponse","onConnect","onDisconnect","slice","onChannelDisconnect","onError","onChannelError","reconnectTimer","clearTimeout","reconnectTimeout","onopen","onWebSocketOpen","bind","onmessage","onWebSocketMessage","onerror","onWebSocketError","onclose","onWebSocketClose","reconnect","Math","min","jitter","random","setTimeout","idleTimer","sendBuffer","checkIdle","text","send","shift","data","keepAlive","set","delegate","onEvent","onLink","onLinked","onSync","onSynced","onUnlink","onUnlinked","onClose","hashBucket","abs","hash","cacheEntry","resolveCache","unresolved","resolved","base","unresolveCache","rotl","distance","mix","mash","charAt","swim-proto-js","websocket"],"mappings":"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","file":"swim-client.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.4.0\"}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.swim || (g.swim = {})).client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.0\"}\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.0\"}\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.config = config;\n\n},{\"./config.json\":3,\"recon-js\":\"recon-js\"}],\"swim-client-js\":[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n}\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.link = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.link(nodeUri, laneUri, options);\n};\nClient.prototype.sync = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.sync(nodeUri, laneUri, options);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope() {\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(hostUri, options) {\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelLinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelSyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    downlink.onChannelConnect();\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.socket && this.socket.readyState === this.socket.OPEN) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onConnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect();\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect();\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError();\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.socket && this.socket.readyState === this.socket.OPEN &&\n      this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction ChannelDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: this, writable: true});\n}\nObject.defineProperty(ChannelDownlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'connected', {\n  get: function () {\n    var socket = this.channel.socket;\n    return socket && socket.readyState === socket.OPEN;\n  },\n  enumerable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelDisconnect', {\n  value: function () {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect();\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelError', {\n  value: function () {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nChannelDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction ChannelLinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelLinkedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelLinkedDownlink.prototype.constructor = ChannelLinkedDownlink;\nObject.defineProperty(ChannelLinkedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ChannelSyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelSyncedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelSyncedDownlink.prototype.constructor = ChannelSyncedDownlink;\nObject.defineProperty(ChannelSyncedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./config.json\":1,\"recon-js\":\"recon-js\",\"swim-proto-js\":4,\"websocket\":2}]},{},[])(\"swim-client-js\")\n});\n\n","module.exports={\"version\":\"0.4.0\"}","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.config = config;\n","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n}\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.link = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.link(nodeUri, laneUri, options);\n};\nClient.prototype.sync = function () {\n  var hostUri, nodeUri, laneUri, options;\n  if (arguments.length === 2) {\n    options = {};\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else if (arguments.length === 3) {\n    if (typeof arguments[2] === 'object') {\n      options = arguments[2];\n      laneUri = arguments[1];\n      nodeUri = arguments[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else {\n      hostUri = arguments[0];\n      nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n      laneUri = arguments[2];\n      options = {};\n    }\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    options = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return channel.sync(nodeUri, laneUri, options);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope() {\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(hostUri, options) {\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelLinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new ChannelSyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    downlink.onChannelConnect();\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.socket && this.socket.readyState === this.socket.OPEN) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onConnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect();\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect();\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError();\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.socket && this.socket.readyState === this.socket.OPEN &&\n      this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction ChannelDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: this, writable: true});\n}\nObject.defineProperty(ChannelDownlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(ChannelDownlink.prototype, 'connected', {\n  get: function () {\n    var socket = this.channel.socket;\n    return socket && socket.readyState === socket.OPEN;\n  },\n  enumerable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelDisconnect', {\n  value: function () {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect();\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelError', {\n  value: function () {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ChannelDownlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nChannelDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction ChannelLinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelLinkedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelLinkedDownlink.prototype.constructor = ChannelLinkedDownlink;\nObject.defineProperty(ChannelLinkedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ChannelSyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  ChannelDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nChannelSyncedDownlink.prototype = Object.create(ChannelDownlink.prototype);\nChannelSyncedDownlink.prototype.constructor = ChannelSyncedDownlink;\nObject.defineProperty(ChannelSyncedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    ChannelDownlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n"],"sourceRoot":"/source/"}