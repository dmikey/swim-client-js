{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","swim-client.min.js","node_modules/swim-proto-js/config.json","node_modules/swim-proto-js/swim-proto.js","swim-client.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","swim","client","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version",2,3,4,"decode","record","recon","tag","EventMessage","CommandMessage","LinkRequest","LinkedResponse","SyncRequest","SyncedResponse","UnlinkRequest","UnlinkedResponse","encode","envelope","parse","string","stringify","Envelope","RequestEnvelope","ResponseEnvelope","MessageEnvelope","node","lane","body","prio","config","Object","defineProperty","prototype","value","create","constructor","withAddress","undefined","headers","concat","@event","tail","head","header","@command","push","@link","@linked","@sync","@synced","@unlink","@unlinked","./config.json","recon-js","swim-client-js","Client","options","enumerable","configurable","Scope","HostScope","channel","hostUri","NodeScope","nodeUri","LaneScope","laneUri","Channel","UriCache","writable","DownlinkBuilder","scope","Downlink","delegate","LinkedDownlink","SyncedDownlink","ListDownlink","MapDownlink","primaryKey","primaryKeyOption","sortBy","sortByOption","baseUri","size","uri","Array","proto","WebSocket","w3cwebsocket","name","args","extractHostUri","resolveNodeUri","getOrCreateChannel","channels","downlink","link","callChannelWithLinkArgs","arguments","sync","syncList","syncMap","command","host","close","scheme","authority","resolve","registerDownlink","unregisterDownlink","__proto__","onChannelClose","downlinks","splice","get","protocols","maxReconnectTimeout","idleTimeout","sendBufferSize","unresolvedUri","uriCache","unresolve","resolvedUri","message","clearIdle","nodeDownlinks","laneDownlinks","socket","readyState","OPEN","onChannelConnect","open","keys","watchIdle","request","onUnlinkRequest","onEnvelope","isEventMessage","onEventMessage","isCommandMessage","onCommandMessage","isLinkRequest","onLinkRequest","isLinkedResponse","onLinkedResponse","isSyncRequest","onSyncRequest","isSyncedResponse","onSyncedResponse","isUnlinkRequest","isUnlinkedResponse","onUnlinkedResponse","resolvedMessage","response","resolvedResponse","onConnect","onDisconnect","slice","onChannelDisconnect","onError","onChannelError","reconnectTimer","clearTimeout","reconnectTimeout","onopen","onWebSocketOpen","bind","onmessage","onWebSocketMessage","onerror","onWebSocketError","onclose","onWebSocketClose","reconnect","Math","min","jitter","random","setTimeout","idleTimer","sendBuffer","checkIdle","text","send","shift","data","keepAlive","onEvent","callback","proxy","onCommand","onLink","onLinked","onSync","onSynced","onUnlink","onUnlinked","onClose","key","configure","normalize","set","index","remoteUpdate","remoteInsert","from","to","remoteMove","remoteRemove","remoteClear","remoteAppend","state","equal","fromIndex","toIndex","@update","pop","@remove","unshift","@insert","move","removed","@move","start","deleteCount","clear","@clear","forEach","thisArg","remoteDelete","remoteSet","table","oldValue","id","sort","has","values","split","identityKey","x","y","compare","hashBucket","abs","hash","cacheEntry","resolveCache","unresolved","resolved","base","unresolveCache","rotl","distance","mix","mash","charAt","swim-proto-js","websocket"],"mappings":"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","file":"swim-client.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.4.1\"}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.swim || (g.swim = {})).client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.1\"}\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nmodule.exports={\"version\":\"0.4.0\"}\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.config = config;\n\n},{\"./config.json\":3,\"recon-js\":\"recon-js\"}],\"swim-client-js\":[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n}\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope() {\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(hostUri, options) {\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    downlink.onChannelConnect();\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.socket && this.socket.readyState === this.socket.OPEN) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onConnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect();\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect();\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError();\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.socket && this.socket.readyState === this.socket.OPEN &&\n      this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function () {\n  this.options.keepAlive = true;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'connected', {\n  get: function () {\n    var socket = this.channel.socket;\n    return socket && socket.readyState === socket.OPEN;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function () {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function () {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect();\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function () {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    Downlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    Downlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = arguments[i];\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = arguments[i];\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = arguments[i];\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove' || tag === '@delete') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        this.remoteSet(key, message.body);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var oldValue = this.state[i];\n      var id = this.primaryKey(oldValue);\n      if (recon.equal(key, id)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var oldValue = this.state[i];\n    var id = this.primaryKey(oldValue);\n    if (recon.equal(key, id)) {\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var id = this.primaryKey(value);\n    if (recon.equal(key, id)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body = recon.concat(recon({'@remove': null}), value);\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = this.primaryKey(value);\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return MapDownlink.identityKey;\n  }\n};\nMapDownlink.identityKey = function (value) { return value; };\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./config.json\":1,\"recon-js\":\"recon-js\",\"swim-proto-js\":4,\"websocket\":2}]},{},[])(\"swim-client-js\")\n});\n\n","module.exports={\"version\":\"0.4.0\"}","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\n\nfunction decode(record) {\n  switch (recon.tag(record)) {\n    case '@event': return EventMessage.decode(record);\n    case '@command': return CommandMessage.decode(record);\n    case '@link': return LinkRequest.decode(record);\n    case '@linked': return LinkedResponse.decode(record);\n    case '@sync': return SyncRequest.decode(record);\n    case '@synced': return SyncedResponse.decode(record);\n    case '@unlink': return UnlinkRequest.decode(record);\n    case '@unlinked': return UnlinkedResponse.decode(record);\n  }\n}\n\nfunction encode(envelope) {\n  return envelope.encode();\n}\n\nfunction parse(string) {\n  return decode(recon.parse(string));\n}\n\nfunction stringify(envelope) {\n  return recon.stringify(encode(envelope));\n}\n\n\nfunction Envelope() {}\nObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\nObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\n\nfunction RequestEnvelope() {\n  Envelope.call(this);\n}\nRequestEnvelope.prototype = Object.create(Envelope.prototype);\nRequestEnvelope.prototype.constructor = RequestEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\nfunction ResponseEnvelope() {\n  Envelope.call(this);\n}\nResponseEnvelope.prototype = Object.create(Envelope.prototype);\nResponseEnvelope.prototype.constructor = ResponseEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isResponse', {value: true});\n\n\nfunction MessageEnvelope() {\n  Envelope.call(this);\n}\nMessageEnvelope.prototype = Object.create(Envelope.prototype);\nMessageEnvelope.prototype.constructor = MessageEnvelope;\nObject.defineProperty(RequestEnvelope.prototype, 'isMessage', {value: true});\n\n\nfunction EventMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nEventMessage.prototype = Object.create(MessageEnvelope.prototype);\nEventMessage.prototype.constructor = EventMessage;\nObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\nEventMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new EventMessage(node, lane, this.body);\n};\nEventMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@event': headers}, this.body);\n};\nEventMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new EventMessage(node, lane, body);\n  }\n};\n\n\nfunction CommandMessage(node, lane, body) {\n  MessageEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\nCommandMessage.prototype.constructor = CommandMessage;\nObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\nCommandMessage.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new CommandMessage(node, lane, this.body);\n};\nCommandMessage.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@command': headers}, this.body);\n};\nCommandMessage.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new CommandMessage(node, lane, body);\n  }\n};\n\n\nfunction LinkRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nLinkRequest.prototype.constructor = LinkRequest;\nObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\nLinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkRequest(node, lane, this.prio, this.body);\n};\nLinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@link': headers}, this.body);\n};\nLinkRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction LinkedResponse(node, lane, prio, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nLinkedResponse.prototype.constructor = LinkedResponse;\nObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\nLinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new LinkedResponse(node, lane, this.prio, this.body);\n};\nLinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@linked': headers}, this.body);\n};\nLinkedResponse.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new LinkedResponse(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncRequest(node, lane, prio, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.prio = prio || 0.0;\n  this.body = body;\n}\nSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\nSyncRequest.prototype.constructor = SyncRequest;\nObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\nSyncRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncRequest(node, lane, this.prio, this.body);\n};\nSyncRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  if (this.prio) headers.push({prio: this.prio});\n  return recon.concat({'@sync': headers}, this.body);\n};\nSyncRequest.decode = function (record) {\n  var node, lane, prio;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (header.prio !== undefined) prio = header.prio;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncRequest(node, lane, prio, body);\n  }\n};\n\n\nfunction SyncedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nSyncedResponse.prototype.constructor = SyncedResponse;\nObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\nSyncedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new SyncedResponse(node, lane, this.body);\n};\nSyncedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@synced': headers}, this.body);\n};\nSyncedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new SyncedResponse(node, lane, body);\n  }\n};\n\n\nfunction UnlinkRequest(node, lane, body) {\n  RequestEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\nUnlinkRequest.prototype.constructor = UnlinkRequest;\nObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\nUnlinkRequest.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkRequest(node, lane, this.body);\n};\nUnlinkRequest.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlink': headers}, this.body);\n};\nUnlinkRequest.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkRequest(node, lane, body);\n  }\n};\n\n\nfunction UnlinkedResponse(node, lane, body) {\n  ResponseEnvelope.call(this);\n  this.node = node;\n  this.lane = lane;\n  this.body = body;\n}\nUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\nUnlinkedResponse.prototype.constructor = UnlinkedResponse;\nObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\nUnlinkedResponse.prototype.withAddress = function (node, lane) {\n  if (node === undefined) node = this.node;\n  if (lane === undefined) lane = this.lane;\n  return new UnlinkedResponse(node, lane, this.body);\n};\nUnlinkedResponse.prototype.encode = function () {\n  var headers = [{node: this.node}, {lane: this.lane}];\n  return recon.concat({'@unlinked': headers}, this.body);\n};\nUnlinkedResponse.decode = function (record) {\n  var node, lane;\n  var body = recon.tail(record);\n  var headers = recon.head(record);\n  var n = headers && headers.length || 0;\n  for (var i = 0; i < n; i += 1) {\n    var header = headers[i];\n    if (header.node !== undefined) node = header.node;\n    else if (header.lane !== undefined) lane = header.lane;\n    else if (i === 0) node = header;\n    else if (i === 1) lane = header;\n  }\n  if (node !== undefined && lane !== undefined) {\n    return new UnlinkedResponse(node, lane, body);\n  }\n};\n\n\nexports.decode = decode;\nexports.encode = encode;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Envelope = Envelope;\nexports.RequestEnvelope = RequestEnvelope;\nexports.ResponseEnvelope = ResponseEnvelope;\nexports.MessageEnvelope = MessageEnvelope;\nexports.EventMessage = EventMessage;\nexports.CommandMessage = CommandMessage;\nexports.SyncRequest = SyncRequest;\nexports.SyncedResponse = SyncedResponse;\nexports.LinkRequest = LinkRequest;\nexports.LinkedResponse = LinkedResponse;\nexports.UnlinkRequest = UnlinkRequest;\nexports.UnlinkedResponse = UnlinkedResponse;\nexports.config = config;\n","'use strict';\n\nvar config = require('./config.json');\nvar recon = require('recon-js');\nvar proto = require('swim-proto-js');\nvar WebSocket = global.WebSocket || require('websocket').w3cwebsocket;\n\n\nfunction Client(options) {\n  options = options || {};\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n}\nObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n  value: function (name, args) {\n    var hostUri, nodeUri, laneUri, options;\n    if (args.length === 2) {\n      options = {};\n      laneUri = args[1];\n      nodeUri = args[0];\n      hostUri = Client.extractHostUri(nodeUri);\n    } else if (args.length === 3) {\n      if (typeof args[2] === 'object') {\n        options = args[2];\n        laneUri = args[1];\n        nodeUri = args[0];\n        hostUri = Client.extractHostUri(nodeUri);\n      } else {\n        hostUri = args[0];\n        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n        laneUri = args[2];\n        options = {};\n      }\n    } else {\n      hostUri = args[0];\n      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n      laneUri = args[2];\n      options = args[3];\n    }\n    var channel = this.getOrCreateChannel(hostUri);\n    return channel[name](nodeUri, laneUri, options);\n  },\n  configurable: true\n});\nClient.prototype.getOrCreateChannel = function (hostUri) {\n  var channel = this.channels[hostUri];\n  if (channel === undefined) {\n    channel = new Channel(hostUri, this.options);\n    this.channels[hostUri] = channel;\n  }\n  return channel;\n};\nClient.prototype.downlink = function () {\n  return new DownlinkBuilder(null, this);\n};\nClient.prototype.link = function () {\n  return this.callChannelWithLinkArgs('link', arguments);\n};\nClient.prototype.sync = function () {\n  return this.callChannelWithLinkArgs('sync', arguments);\n};\nClient.prototype.syncList = function () {\n  return this.callChannelWithLinkArgs('syncList', arguments);\n};\nClient.prototype.syncMap = function () {\n  return this.callChannelWithLinkArgs('syncMap', arguments);\n};\nClient.prototype.command = function () {\n  var hostUri, nodeUri, laneUri, body;\n  if (arguments.length === 3) {\n    body = arguments[2];\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n    body = arguments[3];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  channel.command(nodeUri, laneUri, body);\n};\nClient.prototype.host = function (hostUri) {\n  var channel = this.getOrCreateChannel(hostUri);\n  return new HostScope(channel, hostUri);\n};\nClient.prototype.node = function () {\n  var hostUri, nodeUri;\n  if (arguments.length === 1) {\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new NodeScope(channel, hostUri, nodeUri);\n};\nClient.prototype.lane = function () {\n  var hostUri, nodeUri, laneUri;\n  if (arguments.length === 2) {\n    laneUri = arguments[1];\n    nodeUri = arguments[0];\n    hostUri = Client.extractHostUri(nodeUri);\n  } else {\n    hostUri = arguments[0];\n    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n    laneUri = arguments[2];\n  }\n  var channel = this.getOrCreateChannel(hostUri);\n  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n};\nClient.prototype.close = function () {\n  var channels = this.channels;\n  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n  for (var hostUri in channels) {\n    var channel = channels[hostUri];\n    channel.close();\n  }\n};\nClient.extractHostUri = function (nodeUri) {\n  var uri = recon.uri.parse(nodeUri);\n  var scheme = uri.scheme;\n  if (scheme === 'swim') scheme = 'ws';\n  else if (scheme === 'swims') scheme = 'wss';\n  return recon.uri.stringify({\n    scheme: scheme,\n    authority: uri.authority\n  });\n};\nClient.resolveNodeUri = function (hostUri, nodeUri) {\n  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n};\n\n\nfunction Scope() {\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nScope.prototype.registerDownlink = function (downlink) {\n  var scope = this;\n  Object.defineProperty(downlink, 'onChannelClose', {\n    value: function () {\n      scope.unregisterDownlink(downlink);\n      downlink.__proto__.onChannelClose.call(downlink);\n    },\n    configurable: true\n  });\n  this.downlinks.push(downlink);\n};\nScope.prototype.unregisterDownlink = function (downlink) {\n  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n    if (downlink === this.downlinks[i]) {\n      this.downlinks.splice(i, 1);\n      return;\n    }\n  }\n};\nScope.prototype.close = function () {\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n    var downlink = downlinks[i];\n    downlink.__proto__.onChannelClose.call(downlink);\n  }\n};\n\n\nfunction HostScope(channel, hostUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nHostScope.prototype = Object.create(Scope.prototype);\nHostScope.prototype.constructor = HostScope;\nHostScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n};\nHostScope.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nHostScope.prototype.command = function (nodeUri, laneUri, body) {\n  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n};\nHostScope.prototype.node = function (nodeUri) {\n  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n};\nHostScope.prototype.lane = function (nodeUri, laneUri) {\n  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n};\n\n\nfunction NodeScope(channel, hostUri, nodeUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nNodeScope.prototype = Object.create(Scope.prototype);\nNodeScope.prototype.constructor = NodeScope;\nNodeScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n};\nNodeScope.prototype.link = function (laneUri, options) {\n  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.sync = function (laneUri, options) {\n  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncList = function (laneUri, options) {\n  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.syncMap = function (laneUri, options) {\n  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nNodeScope.prototype.command = function (laneUri, body) {\n  this.channel.command(this.nodeUri, laneUri, body);\n};\nNodeScope.prototype.lane = function (laneUri) {\n  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n};\n\n\nfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n  Scope.call(this);\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n}\nLaneScope.prototype = Object.create(Scope.prototype);\nLaneScope.prototype.constructor = LaneScope;\nLaneScope.prototype.downlink = function () {\n  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n};\nLaneScope.prototype.link = function (options) {\n  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.sync = function (options) {\n  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncList = function (options) {\n  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.syncMap = function (options) {\n  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nLaneScope.prototype.command = function (body) {\n  this.channel.command(this.nodeUri, this.laneUri, body);\n};\n\n\nfunction Channel(hostUri, options) {\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n  Object.defineProperty(this, 'socket', {value: null, writable: true});\n}\nObject.defineProperty(Channel.prototype, 'protocols', {\n  get: function () {\n    return this.options.protocols;\n  }\n});\nObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n  get: function () {\n    return this.options.maxReconnectTimeout || 30000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'idleTimeout', {\n  get: function () {\n    return this.options.idleTimeout || 1000;\n  }\n});\nObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n  get: function () {\n    return this.options.sendBufferSize || 1024;\n  }\n});\nChannel.prototype.resolve = function (unresolvedUri) {\n  return this.uriCache.resolve(unresolvedUri);\n};\nChannel.prototype.unresolve = function (resolvedUri) {\n  return this.uriCache.unresolve(resolvedUri);\n};\nChannel.prototype.link = function (nodeUri, laneUri, options) {\n  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.sync = function (nodeUri, laneUri, options) {\n  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nChannel.prototype.command = function (nodeUri, laneUri, body) {\n  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n  this.push(message);\n};\nChannel.prototype.registerDownlink = function (downlink) {\n  this.clearIdle();\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri] || {};\n  var laneDownlinks = nodeDownlinks[laneUri] || [];\n  laneDownlinks.push(downlink);\n  nodeDownlinks[laneUri] = laneDownlinks;\n  this.downlinks[nodeUri] = nodeDownlinks;\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    downlink.onChannelConnect();\n  } else {\n    this.open();\n  }\n};\nChannel.prototype.unregisterDownlink = function (downlink) {\n  var nodeUri = downlink.nodeUri;\n  var laneUri = downlink.laneUri;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        if (laneDownlinks[i] === downlink) {\n          laneDownlinks.splice(i, 1);\n          if (laneDownlinks.length === 0) {\n            delete nodeDownlinks[laneUri];\n            if (Object.keys(nodeDownlinks).length === 0) {\n              delete this.downlinks[nodeUri];\n              this.watchIdle();\n            }\n            if (this.socket && this.socket.readyState === this.socket.OPEN) {\n              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n              downlink.onUnlinkRequest(request);\n              this.push(request);\n            }\n          }\n          downlink.onChannelClose();\n        }\n      }\n    }\n  }\n};\nChannel.prototype.onEnvelope = function (envelope) {\n  if (envelope.isEventMessage) {\n    this.onEventMessage(envelope);\n  } else if (envelope.isCommandMessage) {\n    this.onCommandMessage(envelope);\n  } else if (envelope.isLinkRequest) {\n    this.onLinkRequest(envelope);\n  } else if (envelope.isLinkedResponse) {\n    this.onLinkedResponse(envelope);\n  } else if (envelope.isSyncRequest) {\n    this.onSyncRequest(envelope);\n  } else if (envelope.isSyncedResponse) {\n    this.onSyncedResponse(envelope);\n  } else if (envelope.isUnlinkRequest) {\n    this.onUnlinkRequest(envelope);\n  } else if (envelope.isUnlinkedResponse) {\n    this.onUnlinkedResponse(envelope);\n  }\n};\nChannel.prototype.onEventMessage = function (message) {\n  var nodeUri = this.resolve(message.node);\n  var laneUri = message.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedMessage = message.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onEventMessage(resolvedMessage);\n      }\n    }\n  }\n};\nChannel.prototype.onCommandMessage = function (message) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onLinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onLinkedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onSyncRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onSyncedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onSyncedResponse(resolvedResponse);\n      }\n    }\n  }\n};\nChannel.prototype.onUnlinkRequest = function (request) {\n  // TODO: Support client services.\n};\nChannel.prototype.onUnlinkedResponse = function (response) {\n  var nodeUri = this.resolve(response.node);\n  var laneUri = response.lane;\n  var nodeDownlinks = this.downlinks[nodeUri];\n  if (nodeDownlinks) {\n    var laneDownlinks = nodeDownlinks[laneUri];\n    if (laneDownlinks) {\n      delete nodeDownlinks[laneUri];\n      if (Object.keys(nodeDownlinks).length === 0) {\n        delete this.downlinks[nodeUri];\n      }\n      var resolvedResponse = response.withAddress(nodeUri);\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onUnlinkedResponse(resolvedResponse);\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.onConnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelConnect();\n      }\n    }\n  }\n};\nChannel.prototype.onDisconnect = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri].slice();\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelDisconnect();\n      }\n    }\n  }\n};\nChannel.prototype.onError = function () {\n  for (var nodeUri in this.downlinks) {\n    var nodeDownlinks = this.downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelError();\n      }\n    }\n  }\n};\nChannel.prototype.open = function () {\n  if (this.reconnectTimer) {\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    this.reconnectTimeout = 0;\n  }\n  if (!this.socket) {\n    this.socket = new WebSocket(this.hostUri, this.protocols);\n    this.socket.onopen = this.onWebSocketOpen.bind(this);\n    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n    this.socket.onerror = this.onWebSocketError.bind(this);\n    this.socket.onclose = this.onWebSocketClose.bind(this);\n  }\n};\nChannel.prototype.close = function () {\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.close();\n    this.socket = null;\n  }\n  var downlinks = this.downlinks;\n  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n  for (var nodeUri in downlinks) {\n    var nodeDownlinks = downlinks[nodeUri];\n    for (var laneUri in nodeDownlinks) {\n      var laneDownlinks = nodeDownlinks[laneUri];\n      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n        var downlink = laneDownlinks[i];\n        downlink.onChannelClose();\n      }\n    }\n  }\n};\nChannel.prototype.reconnect = function () {\n  if (this.reconnectTimer) return;\n  if (!this.reconnectTimeout) {\n    var jitter = 1000 * Math.random();\n    this.reconnectTimeout = 500 + jitter;\n  } else {\n    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n  }\n  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n};\nChannel.prototype.clearIdle = function () {\n  if (this.idleTimer) {\n    clearTimeout(this.idleTimer);\n    this.idleTimer = null;\n  }\n};\nChannel.prototype.watchIdle = function () {\n  if (this.socket && this.socket.readyState === this.socket.OPEN &&\n      this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n  }\n};\nChannel.prototype.checkIdle = function () {\n  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n    this.close();\n  }\n};\nChannel.prototype.push = function (envelope) {\n  if (this.socket && this.socket.readyState === this.socket.OPEN) {\n    this.clearIdle();\n    var text = proto.stringify(envelope);\n    this.socket.send(text);\n    this.watchIdle();\n  } else if (envelope.isCommandMessage) {\n    if (this.sendBuffer.length < this.sendBufferSize) {\n      this.sendBuffer.push(envelope);\n    } else {\n      // TODO\n    }\n    this.open();\n  }\n};\nChannel.prototype.onWebSocketOpen = function () {\n  this.onConnect();\n  var envelope;\n  while ((envelope = this.sendBuffer.shift())) {\n    this.push(envelope);\n  }\n  this.watchIdle();\n};\nChannel.prototype.onWebSocketMessage = function (message) {\n  var data = message.data;\n  if (typeof data === 'string') {\n    var envelope = proto.parse(data);\n    if (envelope) {\n      this.onEnvelope(envelope);\n    }\n  }\n};\nChannel.prototype.onWebSocketError = function () {\n  this.onError();\n  this.clearIdle();\n  if (this.socket) {\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.close();\n    this.socket = null;\n  }\n};\nChannel.prototype.onWebSocketClose = function () {\n  this.socket = null;\n  this.onDisconnect();\n  this.clearIdle();\n  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n    this.reconnect();\n  }\n};\n\n\nfunction DownlinkBuilder(channel, scope) {\n  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n  this.options = {};\n}\nDownlinkBuilder.prototype.host = function (hostUri) {\n  this.hostUri = hostUri;\n  return this;\n};\nDownlinkBuilder.prototype.node = function (nodeUri) {\n  this.nodeUri = nodeUri;\n  return this;\n};\nDownlinkBuilder.prototype.lane = function (laneUri) {\n  this.laneUri = laneUri;\n  return this;\n};\nDownlinkBuilder.prototype.prio = function (prio) {\n  this.options.prio = prio;\n  return this;\n};\nDownlinkBuilder.prototype.keepAlive = function () {\n  this.options.keepAlive = true;\n  return this;\n};\nDownlinkBuilder.prototype.delegate = function (delegate) {\n  this.options.delegate = delegate;\n  return this;\n};\nDownlinkBuilder.prototype.onEvent = function (callback) {\n  this.proxy.onEvent = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onCommand = function (callback) {\n  this.proxy.onCommand = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLink = function (callback) {\n  this.proxy.onLink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onLinked = function (callback) {\n  this.proxy.onLinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSync = function (callback) {\n  this.proxy.onSync = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onSynced = function (callback) {\n  this.proxy.onSynced = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlink = function (callback) {\n  this.proxy.onUnlink = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onUnlinked = function (callback) {\n  this.proxy.onUnlinked = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onConnect = function (callback) {\n  this.proxy.onConnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onDisconnect = function (callback) {\n  this.proxy.onDisconnect = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onError = function (callback) {\n  this.proxy.onError = callback;\n  return this;\n};\nDownlinkBuilder.prototype.onClose = function (callback) {\n  this.proxy.onClose = callback;\n  return this;\n};\nDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n  this.options.primaryKey = primaryKey;\n  return this;\n};\nDownlinkBuilder.prototype.sortBy = function (sortBy) {\n  this.options.sortBy = sortBy;\n  return this;\n};\nObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n  value: function () {\n    if (this.hostUri) {\n      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n    } else {\n      this.hostUri = Client.extractHostUri(this.nodeUri);\n    }\n    if (!this.channel) {\n      // If channel is null then scope references a Client.\n      Object.defineProperty(this, 'channel', {\n        value: this.scope.getOrCreateChannel(this.hostUri),\n        configurable: true\n      });\n      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n  value: function (downlink) {\n    for (var key in this.proxy) {\n      downlink[key] = this.proxy[key];\n    }\n    this.channel.registerDownlink(downlink);\n    if (this.scope) {\n      this.scope.registerDownlink(downlink);\n    }\n  },\n  configure: true\n});\nDownlinkBuilder.prototype.link = function () {\n  this.normalize();\n  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.sync = function () {\n  this.normalize();\n  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncList = function () {\n  this.normalize();\n  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\nDownlinkBuilder.prototype.syncMap = function () {\n  this.normalize();\n  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n  this.registerDownlink(downlink);\n  return downlink;\n};\n\n\nfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n  options = options || {};\n  Object.defineProperty(this, 'channel', {value: channel});\n  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n  Object.defineProperty(this, 'delegate', {value: options.delegate || this, writable: true});\n}\nObject.defineProperty(Downlink.prototype, 'prio', {\n  get: function () {\n    return this.options.prio || 0.0;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'keepAlive', {\n  get: function () {\n    return this.options.keepAlive || false;\n  },\n  set: function (keepAlive) {\n    this.options.keepAlive = keepAlive;\n  }\n});\nObject.defineProperty(Downlink.prototype, 'connected', {\n  get: function () {\n    var socket = this.channel.socket;\n    return socket && socket.readyState === socket.OPEN;\n  },\n  enumerable: true\n});\nObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onEvent === 'function') {\n      this.delegate.onEvent(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n  value: function (message) {\n    if (typeof this.delegate.onCommand === 'function') {\n      this.delegate.onCommand(message);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onLink === 'function') {\n      this.delegate.onLink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onLinked === 'function') {\n      this.delegate.onLinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onSync === 'function') {\n      this.delegate.onSync(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onSynced === 'function') {\n      this.delegate.onSynced(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n  value: function (request) {\n    if (typeof this.delegate.onUnlink === 'function') {\n      this.delegate.onUnlink(request);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n  value: function (response) {\n    if (typeof this.delegate.onUnlinked === 'function') {\n      this.delegate.onUnlinked(response);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n  value: function () {\n    if (typeof this.delegate.onConnect === 'function') {\n      this.delegate.onConnect();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n  value: function () {\n    if (typeof this.delegate.onDisconnect === 'function') {\n      this.delegate.onDisconnect();\n    }\n    if (!this.keepAlive) {\n      this.close();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelError', {\n  value: function () {\n    if (typeof this.delegate.onError === 'function') {\n      this.delegate.onError();\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n  value: function () {\n    if (typeof this.delegate.onClose === 'function') {\n      this.delegate.onClose();\n    }\n  },\n  configurable: true\n});\nDownlink.prototype.close = function () {\n  this.channel.unregisterDownlink(this);\n};\n\n\nfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nLinkedDownlink.prototype = Object.create(Downlink.prototype);\nLinkedDownlink.prototype.constructor = LinkedDownlink;\nObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    Downlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n    this.onLinkRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n}\nSyncedDownlink.prototype = Object.create(Downlink.prototype);\nSyncedDownlink.prototype.constructor = SyncedDownlink;\nObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n  value: function () {\n    Downlink.prototype.onChannelConnect.call(this);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n    this.onSyncRequest(request);\n    this.channel.push(request);\n  },\n  configurable: true\n});\n\n\nfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n}\nListDownlink.prototype = Object.create(SyncedDownlink.prototype);\nListDownlink.prototype.constructor = ListDownlink;\nObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var tag = recon.tag(message.body);\n    var head, index, value;\n    if (tag === '@update') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteUpdate(index, value);\n    } else if (tag === '@insert') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteInsert(index, value);\n    } else if (tag === '@move') {\n      head = recon.head(message.body);\n      var from = recon.get(head, 'from');\n      var to = recon.get(head, 'to');\n      value = recon.tail(message.body);\n      this.remoteMove(from, to, value);\n    } else if (tag === '@remove' || tag === '@delete') {\n      head = recon.head(message.body);\n      index = recon.get(head, 'index');\n      value = recon.tail(message.body);\n      this.remoteRemove(index, value);\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      this.remoteAppend(message.body);\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n  value: function (value) {\n    this.state.push(value);\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n  value: function (index, value) {\n    this.state[index] = value;\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n  value: function (index, value) {\n    if (!recon.equal(this.state[index], value)) {\n      this.state.splice(index, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n  value: function (fromIndex, toIndex, value) {\n    if (!recon.equal(this.state[toIndex], value)) {\n      this.state.splice(fromIndex, 1);\n      this.state.splice(toIndex, 0, value);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n  value: function (index, value) {\n    if (recon.equal(this.state[index], value)) {\n      this.state.splice(index, 1);\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n  value: function (index, value) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(ListDownlink.prototype, 'length', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nListDownlink.prototype.get = function (index) {\n  return this.state[index];\n};\nListDownlink.prototype.set = function (index, value) {\n  this.state[index] = value;\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n};\nListDownlink.prototype.push = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = 0, n = arguments.length; i < n; i += 1) {\n    var value = arguments[i];\n    this.state.push(value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.pop = function () {\n  var value = this.state.pop();\n  var index = this.state.length;\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.unshift = function () {\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n    var value = arguments[i];\n    this.state.unshift(value);\n    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return this.state.length;\n};\nListDownlink.prototype.shift = function () {\n  var value = this.state.shift();\n  if (value !== undefined) {\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return value;\n};\nListDownlink.prototype.move = function (fromIndex, toIndex) {\n  var removed = this.state.splice(fromIndex, 1);\n  if (removed.length === 1) {\n    var value = removed[0];\n    this.state.splice(toIndex, 0, value);\n    var nodeUri = this.channel.unresolve(this.nodeUri);\n    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n};\nListDownlink.prototype.splice = function () {\n  var start = arguments[0];\n  var deleteCount = arguments[1];\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var removed = [];\n  var i, n, value, body, message;\n  for (i = start; i < start + deleteCount; i += 1) {\n    value = this.state[i];\n    if (value !== undefined) {\n      removed.push(value);\n      this.state.splice(start, 1);\n      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n    }\n  }\n  for (i = 2, n = arguments.length; i < n; i += 1) {\n    var index = start + i - 2;\n    value = arguments[i];\n    this.state.splice(index, 0, value);\n    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n    this.onCommandMessage(message);\n    this.channel.push(message);\n  }\n  return removed;\n};\nListDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nListDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, i, this);\n  }\n};\n\n\nfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n  this.sortBy = MapDownlink.sortByOption(this.options);\n}\nMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\nMapDownlink.prototype.constructor = MapDownlink;\nObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n  value: function (message) {\n    var key;\n    var tag = recon.tag(message.body);\n    if (tag === '@remove' || tag === '@delete') {\n      var body = recon.tail(message.body);\n      key = this.primaryKey(body);\n      if (key !== undefined) {\n        this.remoteDelete(key);\n      }\n    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n      this.remoteClear();\n    } else {\n      key = this.primaryKey(message.body);\n      if (key !== undefined) {\n        this.remoteSet(key, message.body);\n      }\n    }\n    SyncedDownlink.prototype.onEventMessage.call(this, message);\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n  value: function (key, value) {\n    if (typeof key === 'string') {\n      this.table[key] = value;\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var oldValue = this.state[i];\n      var id = this.primaryKey(oldValue);\n      if (recon.equal(key, id)) {\n        this.state[i] = value;\n        break;\n      }\n    }\n    if (i === n) {\n      this.state.push(value);\n    }\n    this.sort();\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n  value: function (key) {\n    if (typeof key === 'string') {\n      delete this.table[key];\n    }\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        this.state.splice(i, 1);\n        return;\n      }\n    }\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n  value: function (key) {\n    Object.defineProperty(this, 'state', {value: [], configurable: true});\n    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  },\n  configurable: true\n});\nObject.defineProperty(MapDownlink.prototype, 'size', {\n  get: function () {\n    return this.state.length;\n  },\n  configurable: true,\n  enumerable: true\n});\nMapDownlink.prototype.has = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key] !== undefined;\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    return this.table[key];\n  } else {\n    for (var i = 0, n = this.state.length; i < n; i += 1) {\n      var value = this.state[i];\n      var id = this.primaryKey(value);\n      if (recon.equal(key, id)) {\n        return value;\n      }\n    }\n  }\n};\nMapDownlink.prototype.set = function (key, value) {\n  if (typeof key === 'string') {\n    this.table[key] = value;\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var oldValue = this.state[i];\n    var id = this.primaryKey(oldValue);\n    if (recon.equal(key, id)) {\n      this.state[i] = value;\n      break;\n    }\n  }\n  if (i === n) {\n    this.state.push(value);\n  }\n  this.sort();\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.delete = function (key) {\n  if (typeof key === 'string') {\n    delete this.table[key];\n  }\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var id = this.primaryKey(value);\n    if (recon.equal(key, id)) {\n      this.state.splice(i, 1);\n      var nodeUri = this.channel.unresolve(this.nodeUri);\n      var body = recon.concat(recon({'@remove': null}), value);\n      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n      this.onCommandMessage(message);\n      this.channel.push(message);\n      return true;\n    }\n  }\n  return false;\n};\nMapDownlink.prototype.clear = function () {\n  Object.defineProperty(this, 'state', {value: [], configurable: true});\n  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n  var nodeUri = this.channel.unresolve(this.nodeUri);\n  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n  this.onCommandMessage(message);\n  this.channel.push(message);\n  return this;\n};\nMapDownlink.prototype.sort = function () {\n  if (this.sortBy) {\n    this.state.sort(this.sortBy);\n  }\n};\nMapDownlink.prototype.keys = function () {\n  var keys = [];\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    var key = this.primaryKey(value);\n    if (key !== undefined) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nMapDownlink.prototype.values = function () {\n  return this.state;\n};\nMapDownlink.prototype.forEach = function (callback, thisArg) {\n  for (var i = 0, n = this.state.length; i < n; i += 1) {\n    var value = this.state[i];\n    callback.call(thisArg, value, this);\n  }\n};\nMapDownlink.primaryKeyOption = function (options) {\n  if (typeof options.primaryKey === 'function') {\n    return options.primaryKey;\n  } else if (typeof options.primaryKey === 'string') {\n    var keys = options.primaryKey.split('.');\n    return function (value) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        value = recon.get(value, key);\n      }\n      return value;\n    };\n  } else {\n    return MapDownlink.identityKey;\n  }\n};\nMapDownlink.identityKey = function (value) { return value; };\nMapDownlink.sortByOption = function (options) {\n  if (typeof options.sortBy === 'function') {\n    return options.sortBy;\n  } else if (typeof options.sortBy === 'string') {\n    var keys = options.sortBy.split('.');\n    return function (x, y) {\n      for (var i = 0, n = keys.length; i < n; i += 1) {\n        var key = keys[i];\n        x = recon.get(x, key);\n        y = recon.get(y, key);\n        return recon.compare(x, y);\n      }\n    };\n  }\n};\n\n\nfunction UriCache(baseUri, size) {\n  size = size || 32;\n  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n}\nUriCache.prototype.resolve = function (unresolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n  var cacheEntry = this.resolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n    return cacheEntry.resolved;\n  } else {\n    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n    this.resolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return resolvedUri;\n  }\n};\nUriCache.prototype.unresolve = function (resolvedUri) {\n  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n  var cacheEntry = this.unresolveCache[hashBucket];\n  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n    return cacheEntry.unresolved;\n  } else {\n    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n    this.unresolveCache[hashBucket] = {\n      unresolved: unresolvedUri,\n      resolved: resolvedUri\n    };\n    return unresolvedUri;\n  }\n};\nUriCache.rotl = function (value, distance) {\n  return (value << distance) | (value >>> (32 - distance));\n};\nUriCache.mix = function (code, value) {\n  // MurmurHash3 mix function\n  value *= 0xcc9e2d51;\n  value = UriCache.rotl(value, 15);\n  value *= 0x1b873593;\n  code ^= value;\n  code = UriCache.rotl(code, 13);\n  code = code * 5 + 0xe6546b64;\n  return code;\n};\nUriCache.mash = function (code) {\n  // MurmurHash3 finalize function\n  code ^= code >>> 16;\n  code *= 0x85ebca6b;\n  code ^= code >>> 13;\n  code *= 0xc2b2ae35;\n  code ^= code >>> 16;\n  return code;\n};\nUriCache.hash = function (string) {\n  var code = 0;\n  for (var i = 0, n = string.length; i < n; i += 1) {\n    code = UriCache.mix(code, string.charAt(i));\n  }\n  code = UriCache.mash(code);\n  return code;\n};\n\n\nvar swim = new Client();\nswim.client = function (options) {\n  return new Client(options);\n};\nswim.config = config;\n\nmodule.exports = swim;\n"],"sourceRoot":"/source/"}